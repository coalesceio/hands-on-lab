defaultStorageMapping: STG
jobs:
  Job-1:
    excludeSelector: ""
    id: 1
    includeSelector: "+{name: FCT_LINEITEM_ORDERS_DIM_LOOKUP }"
    name: Job1
    steps: []
    subgraphs: []
locations:
  DW:
    mappingDefinitions:
      "2":
        database: RISHU_HOL_PROD
        schema: DWH
  SRC:
    mappingDefinitions:
      "2":
        database: SNOWFLAKE_SAMPLE_DATA
        schema: TPCH_SF1
  STG:
    mappingDefinitions:
      "2":
        database: RISHU_HOL_PROD
        schema: STG
  VW:
    mappingDefinitions:
      "2":
        database: RISHU_HOL_PROD
        schema: VW
macros:
  Macro-SCALEFREE-DATAVAULT4COALESCE::1:
    id: SCALEFREE-DATAVAULT4COALESCE::1
    macroString: |+
      {%- set datavault4coalesce = namespace(

           config = {
           "ldts_alias": "LDTS",
           "rsrc_alias": "RSRC", 
           "ledts_alias": "LEDTS", 
           "snapshot_trigger_column": "IS_ACTIVE",
           "sdts_alias": "SDTS",
           "is_current_col_alias": "IS_CURRENT", 
           "hash": "MD5", 
           "hash_datatype": "STRING", 
           "hash_input_case_sensitive": "TRUE",
           "hash_passthrough_input_transformations": "TRUE",
           "beginning_of_all_times": "0001-01-01T00:00:01", 
           "end_of_all_times": "8888-12-31T23:59:59",
           "timestamp_format": "YYYY-MM-DDTHH24:MI:SS", 
           "default_unknown_rsrc": "SYSTEM", 
           "default_error_rsrc": "ERROR", 
           "rsrc_default_dtype": "STRING", 
           "stg_default_dtype": "STRING", 
           "error_value__STRING": "'(error)'", 
           "error_value_alt__STRING": "'e'", 
           "unknown_value__STRING": "'(unknown)'",
           "unknown_value_alt__STRING": "'u'"
           }

      ) -%}


      {%- macro datavault4coalesce__string_to_timestamp(format, timestamp) -%}
          TO_TIMESTAMP('{{ timestamp }}', '{{ format }}')
      {%- endmacro -%}


      {%-macro record_source()-%}
      {#--USAGE:{{record_source()}}#}
      {#--NOTES:Adds a Record Source (name of qualified previous table/view)#}
      {%- if sources[0].dependencies -%}
           {% set src = storageLocations | selectattr('name', "equalto", sources[0].dependencies[0].node.location.name) | list | first %} 
           '"{{src.database}}"."{{src.schema}}"."{{sources[0].dependencies[0].node.name}}"'
      {%- else -%}
           'Missing Dependencies!'
      {%- endif -%}
      {%- endmacro -%}


      {%- macro datavault4coalesce__is_expression(obj) -%}

           {%- if obj is string -%}
                {%- if (obj|first == "'" and obj|last == "'") or ("(" in obj and ")" in obj) or "::" in obj or "||" in obj -%}
                     {{ true }}
                {%- else -%}
                     {{ false }}
                {%- endif -%}
           {%- else -%}
                {{ false }}
           {%- endif -%}

      {%- endmacro -%}


      {%- macro datavault4coalesce__escape_column_name(column) -%}

           {%- set escape_char_left  = '"' -%}
           {%- set escape_char_right = '"' -%}

           {%- set escaped_column_name = escape_char_left ~ column|upper|replace(escape_char_left, '')|replace(escape_char_right, '')|trim ~ escape_char_right|indent(4) -%}

           {{ escaped_column_name }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__as_constant(column_str) -%}

           {%- if column_str is not none and column_str is string and column_str -%}
                {%- if column_str|first == "!" -%}
                     {{- "'" ~ column_str[1:] ~ "'" -}}
                {%- else -%}
                     {%- if datavault4coalesce__is_expression(column_str) -%}
                          {{- column_str -}}
                     {%- else -%}
                          {{- datavault4coalesce__escape_column_name(column_str) -}}
                     {%- endif -%}
                {%- endif -%}
           {%- endif -%}
      {%- endmacro -%}


      {%- macro datavault4coalesce__ghost_record_per_datatype(column_name, datatype, ghost_record_type, hash, hash_algo=none) -%}

      {%- set beginning_of_all_times = datavault4coalesce.config.beginning_of_all_times -%}
      {%- set end_of_all_times = datavault4coalesce.config.end_of_all_times -%}
      {%- set timestamp_format = datavault4coalesce.config.timestamp_format -%}
      {%- set unknown_value__STRING = datavault4coalesce.config.unknown_value__STRING -%}
      {%- set unknown_value_alt__STRING = datavault4coalesce.config.unknown_value_alt__STRING -%}
      {%- set error_value__STRING = datavault4coalesce.config.error_value__STRING -%}
      {%- set error_value_alt__STRING = datavault4coalesce.config.error_value_alt__STRING -%}

      {%- if hash %}

           {%- set datatype = datatype|upper -%}
           {%- set hash_alg = datavault4coalesce__hash_algorithm(hash_function=hash_algo, hash_datatype=datatype) -%}
           {%- set unknown_key = datavault4coalesce__unknown_key(hash_function=hash_algo, hash_datatype=datatype) -%}
           {%- set error_key = datavault4coalesce__error_key(hash_function=hash_algo, hash_datatype=datatype) -%}

           {%- if ghost_record_type == 'unknown' -%}
                {{ unknown_key }} as {{ column_name }}
           {%- elif ghost_record_type == 'error' -%}
                {{ error_key }} as {{ column_name }}
           {% endif %}

      {% else %}

           {%- if ghost_record_type == 'unknown' -%}
           {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP', 'DATE'] -%}{{ datavault4coalesce__string_to_timestamp(timestamp_format, beginning_of_all_times) }} AS {{ column_name }}
           {% elif datatype.upper().startswith('STRING') or datatype.upper().startswith('VARCHAR') %}
                {%- if datatype.upper().startswith('VARCHAR') and datatype[8:-1]|int >= unknown_value__STRING|length -%} {{unknown_value__STRING}} AS {{ column_name }}
                {%- elif datatype.upper().startswith('STRING') -%} {{unknown_value__STRING}} AS {{ column_name }}
                {% else %} {{unknown_value_alt__STRING}} AS {{ column_name }}
                {% endif %}
           {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] or datatype.upper().startswith('NUMBER') %}0 AS {{ column_name }}
           {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}
           {% else %}NULL AS {{ column_name }}
           {% endif %}
           {%- elif ghost_record_type == 'error' -%}
           {%- if datatype in ['TIMESTAMP_NTZ','TIMESTAMP', 'DATE'] -%}{{ datavault4coalesce__string_to_timestamp(timestamp_format, end_of_all_times) }} AS {{ column_name }}
           {% elif datatype.upper().startswith('STRING') or datatype.upper().startswith('VARCHAR') %}
                {%- if datatype.upper().startswith('VARCHAR') and datatype[8:-1]|int >= error_value__STRING|length -%} {{error_value__STRING}} AS {{ column_name }}
                {%- elif datatype.upper().startswith('STRING') -%} {{error_value__STRING}} AS {{ column_name }}
                {% else %} {{error_value_alt__STRING}} AS {{ column_name }}
                {% endif %}
           {% elif datatype in ['NUMBER','INT','FLOAT','DECIMAL'] or datatype.upper().startswith('NUMBER') %}-1 AS {{ column_name }}
           {% elif datatype == 'BOOLEAN' %}CAST('FALSE' AS BOOLEAN) AS {{ column_name }}
           {% else %}NULL AS {{ column_name }}
           {% endif %}
           {%- endif -%}

      {%- endif -%}

      {%- endmacro -%}


      {%- macro datavault4coalesce__hash_algorithm(hash_function=none, hash_datatype=none) -%}

           {%- if hash_function is none -%}
                {%- set hash_function = datavault4coalesce.config.hash -%}
           {%- endif -%}
           {%- if hash_datatype is none -%}
                {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}
           {%- endif -%}  

           {%- set dict_result = {} -%}
           {%- set hash_alg = '' -%}

           {%- if hash_function == 'MD5' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set hash_alg = 'MD5' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set hash_alg = 'MD5_BINARY' -%}       
                {%- endif -%}
           {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set hash_alg = 'SHA1' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set hash_alg = 'SHA1_BINARY' -%}       
                {%- endif -%}
           {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' or hash_function == 'SHA256' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set hash_alg = 'SHA2' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set hash_alg = 'SHA2_BINARY' -%}       
                {%- endif -%}   
           {%- endif -%}

           {{ hash_alg }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__unknown_key(hash_function=none, hash_datatype=none) -%}
           {%- if hash_function is none -%}
                {%- set hash_function = datavault4coalesce.config.hash -%}
           {%- endif -%}
           {%- if hash_datatype is none -%}
                {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}
           {%- endif -%}     

           {%- set dict_result = {} -%}
           {%- set unknown_key = '' -%}

           {%- if hash_function == 'MD5' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set unknown_key = '!00000000000000000000000000000000' -%}
                {%- elif 'BINARY' in hash_datatype -%}  
                     {%- set unknown_key = "TO_BINARY('00000000000000000000000000000000')" -%}     
                {%- endif -%}                       
           {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set unknown_key = '!0000000000000000000000000000000000000000' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set unknown_key = "TO_BINARY('0000000000000000000000000000000000000000')" -%}     
                {%- endif -%}
           {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' or hash_function == 'SHA256'  -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set unknown_key = '!0000000000000000000000000000000000000000000000000000000000000000' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set unknown_key = "TO_BINARY('0000000000000000000000000000000000000000000000000000000000000000')" -%}  
                {%- endif -%}   
           {%- endif -%}

           {% set unknown_key = datavault4coalesce__as_constant(unknown_key) %}
           {{ unknown_key }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__error_key(hash_function=none, hash_datatype=none) -%}
           {%- if hash_function is none -%}
                {%- set hash_function = datavault4coalesce.config.hash -%}
           {%- endif -%}
           {%- if hash_datatype is none -%}
                {%- set hash_datatype = datavault4coalesce.config.hash_datatype -%}
           {%- endif -%}  

           {%- set dict_result = {} -%}
           {%- set error_key = '' -%}

           {%- if hash_function == 'MD5' -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set error_key = '!ffffffffffffffffffffffffffffffff' -%}
                {%- elif 'BINARY' in hash_datatype -%}  
                     {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffff')" -%}     
                {%- endif -%}          
           {%- elif hash_function == 'SHA1' or hash_function == 'SHA1_HEX' or hash_function == 'SHA' -%} 
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffff' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffffffffffff')" -%}        
                {%- endif -%}
           {%- elif hash_function == 'SHA2' or hash_function == 'SHA2_HEX' or hash_function == 'SHA256'  -%}
                {%- if 'VARCHAR' in hash_datatype or 'CHAR' in hash_datatype or 'STRING' in hash_datatype or 'TEXT' in hash_datatype %}
                     {%- set error_key = '!ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff' -%}
                {%- elif 'BINARY' in hash_datatype -%}
                     {%- set error_key = "TO_BINARY('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')" -%}        
                {%- endif -%}   
           {%- endif -%}

           {% set error_key = datavault4coalesce__as_constant(error_key) %}
           {{ error_key }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__is_something(obj) -%}

          {%- if obj is not none and obj is defined and obj -%}
              {{ true }}
          {%- else -%}
              {{ false }}
          {%- endif -%}

      {%- endmacro -%}


      {%- macro datavault4coalesce__attribute_standardise() -%}

      CONCAT('\"', REPLACE(REPLACE(REPLACE(TRIM(CAST([EXPRESSION] AS STRING)), '\\', '\\\\'), '[QUOTE]', '\"'), '[NULL_PLACEHOLDER_STRING]', '--'), '\"')

      {%- endmacro -%}


      {%- macro datavault4coalesce__standardise_prefix(case_sensitive, hash_alg, datatype, zero_key, alias) -%}

      {%- set dict_result = {} -%}

      {%- set zero_key = datavault4coalesce__as_constant(column_str=zero_key) -%}

      {%- if 'VARCHAR' in datatype or 'CHAR' in datatype or 'STRING' in datatype or 'TEXT' in datatype %}

          {%- if case_sensitive -%}
              
              {%- set standardise_prefix = "COALESCE(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(".format(hash_alg)-%}

          {%- else -%}
              
              {%- set standardise_prefix = "COALESCE(LOWER({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(".format(hash_alg)-%}

          {%- endif -%}

      {%- else -%}

          {%- if case_sensitive -%}
              
              {%- set standardise_prefix = "COALESCE({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(UPPER(CONCAT(".format(hash_alg)-%}

          {%- else -%}
              
              {%- set standardise_prefix = "COALESCE({}(NULLIF(CAST(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(REGEXP_REPLACE(CONCAT(".format(hash_alg)-%}

          {%- endif -%}

      {%- endif -%}

      {{ standardise_prefix }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__standardise_suffix(case_sensitive, hash_alg, datatype, zero_key, alias) -%}

      {%- set dict_result = {} -%}

      {%- set zero_key = datavault4coalesce__as_constant(column_str=zero_key) -%}

      {%- if 'VARCHAR' in datatype or 'CHAR' in datatype or 'STRING' in datatype or 'TEXT' in datatype %}

          {%- if case_sensitive -%}
       
              {%- if alias is not none -%}
                  {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]'))), {}) AS {}".format(zero_key, alias)-%}
              {%- else -%}
                  {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]'))), {})".format(zero_key)-%}
              {%- endif -%}

          {%- else -%}
       
              {%- if alias is not none -%}
                  {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]'))), {}) AS {}".format(zero_key, alias)-%}
              {%- else -%}
                  {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]'))), {})".format(zero_key)-%}
              {%- endif -%}

          {%- endif -%}

      {%- else -%}

          {%- if case_sensitive -%}

              {%- if alias is not none -%}
                  {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')), {}) AS {}".format(zero_key, alias)-%}
              {%- else -%}
                  {%- set standardise_suffix = "\n)), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')), {})".format(zero_key)-%}
              {%- endif -%}

          {%- else -%}

              {%- if alias is not none -%}
                  {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')), {}) AS {}".format(zero_key, alias)-%}
              {%- else -%}
                  {%- set standardise_suffix = "\n), '\\n', '') \n, '\\t', '') \n, '\\v', '') \n, '\\r', '') AS STRING), '[ALL_NULL]')), {})".format(zero_key)-%}
              {%- endif -%}

          {%- endif -%}

      {%- endif -%}

      {{ standardise_suffix }}

      {%- endmacro -%}


      {%- macro datavault4coalesce__hash(columns, alias=none, datatype='STRING', algo='MD5') -%}

      {%- set concat_string = '||' -%}
      {%- set quote = '"' -%}
      {%- set null_placeholder_string = '^^' -%}

      {%- set hash_input_case_sensitive = datavault4coalesce.config.hash_input_case_sensitive -%}

      {#- Select hashing algorithm -#}
      {%- set datatype = datatype|upper -%}
      {%- set hash_alg = datavault4coalesce__hash_algorithm(hash_function=algo, hash_datatype=datatype) -%}
      {%- set unknown_key = datavault4coalesce__unknown_key(hash_function=algo, hash_datatype=datatype) -%}
      {%- set error_key = datavault4coalesce__error_key(hash_function=algo, hash_datatype=datatype) -%}

      {%- set ns = namespace(columns=[], all_null=[]) -%}

      {%- set attribute_standardise = datavault4coalesce__attribute_standardise() %}

      {%- set columns_input = columns -%}

      {%- for column in columns_input -%}
           {%- set ns.columns = ns.columns + [column.name] -%}
      {%- endfor -%}


      {%- set standardise_prefix = datavault4coalesce__standardise_prefix(case_sensitive=hash_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key) -%}
      {%- set standardise_suffix = datavault4coalesce__standardise_suffix(case_sensitive=hash_input_case_sensitive, hash_alg=hash_alg, datatype=hash_dtype, alias=alias, zero_key=unknown_key) -%}    

      {{ standardise_prefix }}

      {%- for column in columns -%}

          {%- set ns.all_null = ns.all_null + [null_placeholder_string] -%}

           {%- if datavault4coalesce.config.hash_passthrough_input_transformations -%}

                {%- set column_str = datavault4coalesce__as_constant(get_source_transform(column)) -%}

           {%- else -%}

                {%- if '.' in column.name %}
                     {% set column_str = column.name -%}
                {%- else -%}
                     {%- set column_str = datavault4coalesce__as_constant(column.name) -%}
                {%- endif -%}
           {%- endif -%}

          {{- "\nCOALESCE(({}), '{}')".format(attribute_standardise | replace('[EXPRESSION]', column_str) | replace('[QUOTE]', quote) | replace('[NULL_PLACEHOLDER_STRING]', null_placeholder_string), null_placeholder_string) | indent(4) -}}
          {{- ",'{}',".format(concat_string) if not loop.last -}}

          {%- if loop.last -%}

              {{ standardise_suffix | replace('[ALL_NULL]', ns.all_null | join("")) | indent(4) }}

          {%- else -%}

              {%- set ns.all_null = ns.all_null + [concat_string] -%}

          {%- endif -%}

      {%- endfor -%}

      {%- endmacro -%}





    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
packages:
  COALESCE-MISC:
    addedBy: TNkJiAjrrXb7e8IuNyIhYUnzjL92
    createdAt:
      nanoseconds: 436000000
      seconds: 1690342878
    id: COALESCE-MISC
    manifest:
      macros: {}
      stepTypes:
        COALESCE-MISC::10:
          id: COALESCE-MISC::10
          name: Node Profiler
        COALESCE-MISC::11:
          id: COALESCE-MISC::11
          name: De-Dupe
        COALESCE-MISC::12:
          id: COALESCE-MISC::12
          name: Snapshot
        COALESCE-MISC::13:
          id: COALESCE-MISC::13
          name: SQL
        COALESCE-MISC::14:
          id: COALESCE-MISC::14
          name: Copy Into
        COALESCE-MISC::15:
          id: COALESCE-MISC::15
          name: Stream and Insert or Merge
        COALESCE-MISC::16:
          id: COALESCE-MISC::16
          name: Dynamic Table
        COALESCE-MISC::2:
          id: COALESCE-MISC::2
          name: Unload
        COALESCE-MISC::7:
          id: COALESCE-MISC::7
          name: CDC Table
        COALESCE-MISC::8:
          id: COALESCE-MISC::8
          name: DATE
        COALESCE-MISC::9:
          id: COALESCE-MISC::9
          name: External Table
    status: added
    version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    versionInfo:
      commit: 12e8cdf69cdb71cfc00ec80121a4ee8256a5d2c6
  SCALEFREE-DATAVAULT4COALESCE:
    addedBy: TNkJiAjrrXb7e8IuNyIhYUnzjL92
    createdAt:
      nanoseconds: 584000000
      seconds: 1690501111
    id: SCALEFREE-DATAVAULT4COALESCE
    manifest:
      macros:
        SCALEFREE-DATAVAULT4COALESCE::1:
          id: SCALEFREE-DATAVAULT4COALESCE::1
          name: SCALEFREE-DATAVAULT4COALESCE::1
      stepTypes:
        SCALEFREE-DATAVAULT4COALESCE::12:
          id: SCALEFREE-DATAVAULT4COALESCE::12
          name: "Datavault by Scalefree: PIT"
        SCALEFREE-DATAVAULT4COALESCE::13:
          id: SCALEFREE-DATAVAULT4COALESCE::13
          name: "Datavault by Scalefree: Snapshot v0"
        SCALEFREE-DATAVAULT4COALESCE::14:
          id: SCALEFREE-DATAVAULT4COALESCE::14
          name: "Datavault by Scalefree: Snapshot v1"
        SCALEFREE-DATAVAULT4COALESCE::4:
          id: SCALEFREE-DATAVAULT4COALESCE::4
          name: "Datavault by Scalefree: Stage"
        SCALEFREE-DATAVAULT4COALESCE::6:
          id: SCALEFREE-DATAVAULT4COALESCE::6
          name: "Datavault by Scalefree: Hub"
        SCALEFREE-DATAVAULT4COALESCE::7:
          id: SCALEFREE-DATAVAULT4COALESCE::7
          name: "Datavault by Scalefree: Link"
        SCALEFREE-DATAVAULT4COALESCE::8:
          id: SCALEFREE-DATAVAULT4COALESCE::8
          name: "Datavault by Scalefree: Satellite v0"
        SCALEFREE-DATAVAULT4COALESCE::9:
          id: SCALEFREE-DATAVAULT4COALESCE::9
          name: "Datavault by Scalefree: Satellite v1"
    status: added
    version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    versionInfo:
      commit: 016ad442cb5d5a182dd42e3e7d77c9a2ee968a73
projects: {}
stepTypes:
  StepType-COALESCE-MISC::10:
    id: COALESCE-MISC::10
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Node Profiler
        short: PROF
        tagColor: blue
        plural: Node Profilers



        config:
        - groupName: Sampling Options
          items:
          - displayName: Sample Mode
            attributeName: sampleMode
            type: dropdownSelector
            default: Sample
            options:
              - Sample
              - Full Table
           
            isRequired: false
          
          - displayName: Percent or Fixed Number of Rows
            attributeName: sampleOption
            type: dropdownSelector
            default: Fixed Row
            options:
              - Fixed Row
              - Percentage
            isRequired: false
            enableIf: "{% if config.sampleMode == 'Sample' %} true {% else %} false {% endif %}"


          - displayName: Number of Rows
            attributeName: sampleRows
            type: textBox
            default: '1000'
            isRequired: false
            enableIf: "{% if config.sampleMode == 'Sample' and config.sampleOption == 'Fixed Row' %} true {% else %} false {% endif %}"
          
          - displayName: Percentage
            attributeName: samplePercent
            type: textBox
            default: '10'
            isRequired: false
            enableIf: "{% if config.sampleMode == 'Sample' and config.sampleOption == 'Percentage' %} true {% else %} false {% endif %}"

        - groupName: Distinct and Null
          items:
          - displayName: Distict Count
            attributeName: isDistinctCount
            type: columnSelector
            isRequired: false
          
          - displayName: Null Count
            attributeName: isNullCount
            type: columnSelector
            isRequired: false

        - groupName: Min / Max / Avg
          items:
          - displayName: MAX Value
            attributeName: isMaxMetric
            type: columnSelector
            isRequired: false

          - displayName: MIN Value
            attributeName: isMinMetric
            type: columnSelector
            isRequired: false
          - displayName: Average Value
            attributeName: isAvgMetric
            type: columnSelector
            isRequired: false


        systemColumns:

        - displayName: PROFILE_METRIC
          transform: "NULL"
          dataType: VARCHAR
          placement: beginning
          attributeName: isSystemUpdateDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: beginning
          attributeName: isSystemCreateDate
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
                {{ stage('Create Profile Node Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" VARCHAR 
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            {% endif %}
        run:
          templateString: |-
            {% if columns | selectattr('isDistinctCount')| list | length > 0 %}
                {{ stage('Profile Distinct') }}
                
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT
                        'DISTINCT' as "PROFILE_METRIC",
                        {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            {% if col.isDistinctCount %}
                                COUNT(DISTINCT "{{ col.name }}" )
                            {% else %}
                                {% if col.transform | trim != '' %}{{ col.transform }}{% else %}NULL{% endif %}
                            {% endif %}
                            AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}

                        {{ sources[0].join }} 
                        {% if config.sampleMode == 'Sample' %} 
                            sample (
                            {% if config.sampleOption == 'Percentage' %} 
                                {{ config.samplePercent }}
                            {% else %}
                                {{ config.sampleRows }} rows 
                            {% endif %}
                            )
                        {% endif %}
                        )
                        AS "SRC"
                    ON {% for col in sources[0].columns if col.isSystemUpdateDate or col.isSystemCreateDate -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                    WHEN MATCHED
                    THEN UPDATE SET
                    {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            {% endif %}


            {% if columns | selectattr('isNullCount')| list | length > 0 %}
                {{ stage('Profile Null Values') }}
                
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT
                        'Null Count' as "PROFILE_METRIC",
                        {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            {% if col.isNullCount %}
                                SUM(CASE WHEN "{{ col.name }}" is NULL THEN 1 ELSE 0 END     )
                            {% else %}
                                {% if col.transform | trim != '' %}{{ col.transform }}{% else %}NULL{% endif %}
                            {% endif %}
                            AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}

                        {{ sources[0].join }} 
                        {% if config.sampleMode == 'Sample' %} 
                            sample (
                            {% if config.sampleOption == 'Percentage' %} 
                                {{ config.samplePercent }}
                            {% else %}
                                {{ config.sampleRows }} rows 
                            {% endif %}
                            )
                        {% endif %}
                    ) AS "SRC"
                     ON {% for col in sources[0].columns if col.isSystemUpdateDate or col.isSystemCreateDate -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                    WHEN MATCHED
                    THEN UPDATE SET
                    {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            {% endif %}


            {% if columns | selectattr('isMaxMetric')| list | length > 0 %}
                {{ stage('Profile Max') }}
                
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT DISTINCT
                        'MAX' as "PROFILE_METRIC",
                        {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            {% if col.isMaxMetric %}
                               (SELECT MAX("{{col.name}}") 
                                {{ sources[0].join }} 
                                {% if config.sampleMode == 'Sample' %} 
                                    sample (
                                    {% if config.sampleOption == 'Percentage' %} 
                                        {{ config.samplePercent }}
                                    {% else %}
                                        {{ config.sampleRows }} rows 
                                    {% endif %}
                                    )
                                {% endif %} ) 
                            {% else %}
                                {% if col.transform | trim != '' %}{{ col.transform }}{% else %}NULL{% endif %}
                            {% endif %}
                            AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}

                        {{ sources[0].join }} 
                        {% if config.sampleMode == 'Sample' %} 
                            sample (
                            {% if config.sampleOption == 'Percentage' %} 
                                {{ config.samplePercent }}
                            {% else %}
                                {{ config.sampleRows }} rows 
                            {% endif %}
                            )
                        {% endif %} )
                        AS "SRC"
                    ON {% for col in sources[0].columns if col.isSystemUpdateDate or col.isSystemCreateDate -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                    WHEN MATCHED
                    THEN UPDATE SET
                    {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            {% endif %}

            {% if columns | selectattr('isMinMetric')| list | length > 0 %}
                {{ stage('Profile Min') }}
                
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT DISTINCT
                        'MIN' as "PROFILE_METRIC",
                        {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            {% if col.isMinMetric %}
                               (SELECT MIN("{{col.name}}") 
                               {{ sources[0].join }} 
                                {% if config.sampleMode == 'Sample' %} 
                                    sample (
                                    {% if config.sampleOption == 'Percentage' %} 
                                        {{ config.samplePercent }}
                                    {% else %}
                                        {{ config.sampleRows }} rows 
                                    {% endif %}
                                    )
                                {% endif %} ) 
                            {% else %}
                                {% if col.transform | trim != '' %}{{ col.transform }}{% else %}NULL{% endif %}
                            {% endif %}
                            AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}

                        {{ sources[0].join }} 
                        {% if config.sampleMode == 'Sample' %} 
                            sample (
                            {% if config.sampleOption == 'Percentage' %} 
                                {{ config.samplePercent }}
                            {% else %}
                                {{ config.sampleRows }} rows 
                            {% endif %}
                            )
                        {% endif %} )
                        AS "SRC"
                    ON {% for col in sources[0].columns if col.isSystemUpdateDate or col.isSystemCreateDate -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                    WHEN MATCHED
                    THEN UPDATE SET
                    {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            {% endif %}

            {% if columns | selectattr('isAvgMetric')| list | length > 0 %}
                {{ stage('Profile Average') }}
                
                    MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    USING (
                        SELECT DISTINCT
                        'AVG' as "PROFILE_METRIC",
                        {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            {% if col.isAvgMetric %}
                               (SELECT AVG("{{col.name}}") 
                               {{ sources[0].join }} 
                                {% if config.sampleMode == 'Sample' %} 
                                    sample (
                                    {% if config.sampleOption == 'Percentage' %} 
                                        {{ config.samplePercent }}
                                    {% else %}
                                        {{ config.sampleRows }} rows 
                                    {% endif %}
                                    )
                                {% endif %} ) 
                            {% else %}
                                {% if col.transform | trim != '' %}{{ col.transform }}{% else %}NULL{% endif %}
                            {% endif %}
                            AS "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}

                        {{ sources[0].join }} 
                        {% if config.sampleMode == 'Sample' %} 
                            sample (
                            {% if config.sampleOption == 'Percentage' %} 
                                {{ config.samplePercent }}
                            {% else %}
                                {{ config.sampleRows }} rows 
                            {% endif %}
                            )
                        {% endif %} )
                        AS "SRC"
                     ON {% for col in sources[0].columns if col.isSystemUpdateDate or col.isSystemCreateDate -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                    WHEN MATCHED
                    THEN UPDATE SET
                    {%- for col in sources[0].columns if not col.isSystemUpdateDate %}
                            "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor %}
                    WHEN NOT MATCHED THEN
                    INSERT (
                    {%- for col in columns %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in columns %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

            {% endif %}
    name: Node Profiler
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-COALESCE-MISC::11:
    id: COALESCE-MISC::11
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: De-Dupe
        short: DE_DUPE
        tagColor: violet
        plural: De-Dupes



        config:
        - groupName: De-Dupe Config
          items:

          - displayName: Primary Key
            attributeName: isBusKey
            type: columnSelector
            isRequired: true

          - displayName: Exact Match ALL
            attributeName: isExactMatchALL
            type: columnSelector
            isRequired: true
          
          - displayName: Exact Match ANY
            attributeName: isExactMatchANY
            type: columnSelector
            isRequired: true

        systemColumns:
        - displayName: GROUP_ID
          transform: ''
          dataType: INT
          placement: end
          attributeName: group_id
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create ' + node.name  + ' Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT '{{ col.defaultValue }}'{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |-
            {{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}

            {#{% if columns | selectattr('isExactMatchALL') | list | length > 0 %} #}

              {{ stage('Create edges table') }}
              CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, 'tblEdge') }}
              (
                ROW_ID INT IDENTITY START 1 INCREMENT 1,
                GROUP_NO INT NULL DEFAULT 0
                ,LFT VARCHAR(50) NULL
                ,RGT VARCHAR(50) NULL
              )

              {# 'INITIALIZE variables '#}
            	{# 'set source table name '#}
              {% set src_table_name = sources[0].dependencies[0].node.name %}

            	{# 'set business key name '#}
              {% set ns = namespace() %}
              {% set ns.business_key = '<no business key found>' %}
              {%- for col in columns %}
                {% if col.isBusKey %}
                    {% set ns.business_key = col.name  %}
                {% endif %}
              {% endfor %}
              
              

              {{ stage('find and insert edges') }}
              INSERT INTO {{ ref_no_link(node.location.name, 'tblEdge') }} 
              (LFT,RGT) 
              {%- for colANY in columns  if colANY.isExactMatchANY %}
              

              SELECT * FROM(
              WITH tblA AS(       
                SELECT
            			{% for col in sources[0].columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %} 
                ,ROW_NUMBER() OVER (PARTITION BY
                    {%- for col in columns  if col.isExactMatchALL %}
                            "{{ col.name }}"
                          {% if not loop.last %}, {% endif %} 
                    {% endfor %} 
                    , "{{ colANY.name }}"
                    ORDER BY
                    {%- for col in columns  if col.isBusKey %}
                            "{{ col.name }}"
                          {% if not loop.last %}, {% endif %} 
                    {% endfor %}) AS ROW_NUM
                        {{ sources[0].join }} 
              )
                SELECT 
                   {%- for col in columns  if col.isBusKey %}
                            L."{{ col.name }}",R."{{ col.name }}"
                          {% if not loop.last %}, {% endif %} 
                    {% endfor %}
                FROM tblA L INNER JOIN tblA R
                ON  {%- for col in columns  if col.isExactMatchALL %}
                           L."{{ col.name }}" = R."{{ col.name }}"
                          {% if not loop.last %} AND {% endif %} 
                    {% endfor %} 
                AND L."{{ colANY.name }}" = R."{{ colANY.name }}"
                AND L.ROW_NUM = R.ROW_NUM - 1
                WHERE TRIM(NVL(L."{{ colANY.name }}",'')) <> '' AND TRIM(NVL(R."{{ colANY.name }}",'')) <> ''
              )
             {% if not loop.last %}UNION {% endif %} 

             {% endfor %} 

             
            {{ stage('Identify groups and assign a number') }}

              EXECUTE IMMEDIATE $$
              BEGIN
              WHILE ( (SELECT COUNT(*) FROM {{ ref_no_link(node.location.name, 'tblEdge') }}  WHERE GROUP_NO = 0) > 0)  DO
              
              UPDATE {{ ref_no_link(node.location.name, 'tblEdge') }}  e1
               SET GROUP_NO = g1.GROUP_NO
               FROM(
                      WITH max_Group_no AS(
                            SELECT MAX(GROUP_NO) AS GROUP_NO FROM {{ ref_no_link(node.location.name, 'tblEdge') }} 
                      ) 
                         , cte_tblGroup AS(
                          SELECT TOP 1 ROW_ID,mg.GROUP_NO + 1 AS GROUP_NO,LFT,RGT FROM {{ ref_no_link(node.location.name, 'tblEdge') }}  e ,max_Group_no mg WHERE e.GROUP_NO = 0 
                           UNION ALL
                          SELECT e.ROW_ID,g.GROUP_NO ,e.LFT,e.RGT
                          FROM {{ ref_no_link(node.location.name, 'tblEdge') }}  e 
                             INNER JOIN cte_tblGroup g  ON (e.lft = g.lft OR e.lft = g.rgt OR e.rgt = g.rgt OR e.rgt = g.lft)  
                          WHERE e.ROW_ID > g.ROW_ID
                              )
                   SELECT * FROM cte_tblGroup
                  ) AS g1
              WHERE e1.ROW_ID = g1.ROW_ID;
              END WHILE;
              END;
             $$
            ;

             {{ stage('Final Result') }}

             {% for source in sources %}
              
             INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                    (
                      {% for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%},{% endif %}
                      {% endfor %}
                    )

                SELECT DISTINCT
            			{% for col in source.columns %}
                     {% if col.name != 'GROUP_ID' %}    
                         {{ get_source_transform(col) }} AS "{{ col.name }}"
                      {% else %}   
                          E.GROUP_NO
                      {% endif %}  
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
              	{{ source.join }}	 
                INNER JOIN {{ ref_no_link(node.location.name, 'tblEdge') }}  "E"
                 ON {{ src_table_name }} {{'.'}} {{ ns.business_key }}  = E.LFT 
                      OR {{ src_table_name }} {{'.'}} {{ ns.business_key }}  = E.RGT

                 UNION

                SELECT DISTINCT
            			{% for col in source.columns %}
                      {% if col.name != 'GROUP_ID' %}    
                         {{ get_source_transform(col) }} AS "{{ col.name }}"
                      {% else %}   
                          NVL(E.GROUP_NO, -{{ src_table_name }}.{{ ns.business_key }} )
                      {% endif %}  
            				  {%- if not loop.last -%}, {% endif %}
            			{% endfor %}
              	{{ source.join }}	 
                LEFT JOIN {{ ref_no_link(node.location.name, 'tblEdge') }}  "E"
                 ON {{ src_table_name }} {{'.'}} {{ ns.business_key }} = E.LFT 
                          OR {{ src_table_name }} {{'.'}} {{ ns.business_key }}= E.RGT 
                WHERE E.LFT IS NULL OR E.RGT IS NULL
                                                                                  
            	{% endfor %}

               
             
            {# SELECT * FROM tblEdges #}
            {# {% endif %}    #}  
                    
    name: De-Dupe
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-COALESCE-MISC::12:
    id: COALESCE-MISC::12
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Snapshot
        short: SNAP
        plural: Snapshots
        tagColor: 'black'

        config:

        - groupName: About this Node
          items:
          - displayName: Description
            attributename: description
            type: textBox
            isRequired: false
            default: "This node takes a single historical data table such as a type2 dimension or a data vault satellite  and normalizes the data to a desired snapshot period.\nHere are the steps on how to use this node:\n
            
              1. Create this node on an existing historical data table\n
              2. After creating the node, you'll notice a new column called SNAPSHOT_DATE added at the beginning. Do not delete or rename this column\n
              3. Under the Source Table Info config section, select the business key column, and also the date column from the source table that indicates when the source record was loaded. Note that this is not the SNAPSHOT_DATE that was added automatically\n
              4. Under the Snapshot Options, select the snapshot period, number of snapshots, and the calendar startdate for which the snapshots are being generated\n
              "
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

        - groupName: Source Table Info
          items:
          - type: businessKeyColumns
            isRequired: true

          - type: columnSelector
            displayName : Date Column
            attributeName : dateColumnSource
            isRequired: true


        - groupName: Snapshot Options
          items:
          - displayName: Period
            attributeName: snapshotPeriod
            type: dropdownSelector
            default: "Month"
            options:
            - "Day"
            - "Week"
            - "Month"
            - "Quarter"
            - "Year"
            isRequired: true

          - displayName: Number of Snapshots
            attributeName: snapshotsToGenerate
            type: textBox
            default: '1'

          - displayName: Start Date
            attributeName: startDate
            type: textBox
            syntax: sql
            default: 'DATEADD(DAY, -1, CURRENT_DATE)'

        systemColumns:
        - displayName: SNAPSHOT_DATE
          transform: ''
          dataType: 'DATE'
          placement: beginning
          attributeName: isSnapShotDate
      templates:
        create:
          templateString: |+
            {{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

        run:
          templateString: |
            {% for test in node.tests if config.testsEnabled %}
            	{% if test.runOrder == 'Before' %}
            		{{ test_stage(test.name, test.continueOnFailure) }}
            		{{ test.templateString }}
            	{% endif %}
            {% endfor %}

            	
            {% if config.truncateBefore %}
            	{{ stage('Truncate Stage Table') }}
            	TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            {% endif %}


            {% for source in sources %}

            	{{ stage('Insert ' + source.name | string ) }}

                {# 'set the number of calendar days '#}
            	{%with no_of_cal_days = 0 %} {% endwith %}
                
            	 {% if config.snapshotPeriod == 'Day' %}
                    {% set no_of_cal_days = config.snapshotsToGenerate %}
                {% elif config.snapshotPeriod == 'Week' %}
                    {% set no_of_cal_days = config.snapshotsToGenerate + ' * 7' %}
                {% elif config.snapshotPeriod == 'Month' %}
                    {% set no_of_cal_days = config.snapshotsToGenerate + ' * 31' %}
                {% elif config.snapshotPeriod == 'Quarter' %}
                    {% set no_of_cal_days = config.snapshotsToGenerate + ' * 93' %}
                {% elif config.snapshotPeriod == 'Year' %}
                    {% set no_of_cal_days = config.snapshotsToGenerate + ' * 365' %}     
                {% endif %}

            	{# 'set source table name '#}
            	{%with src_table_name = '' %} {% endwith %}
                {% set src_table_name = sources[0].dependencies[0].node.name %}

            	{# 'set date source column name. this is the date/timestamp column in the source table '#}
            	{%with src_date_col_name = 'LOAD_DATE' %} {% endwith %}
            	{% for col in source.columns if col.dateColumnSource -%}
            		    {% set src_date_col_name =  'LOAD_DATE'  %}
            	{% endfor %}


            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in source.columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)

                WITH tblCAL AS(
                SELECT
                  DATEADD(DAY, SEQ4(), DATEADD(DAY, -1, {{config.startDate}})) AS "DATE_COL"
                FROM  TABLE(GENERATOR(ROWCOUNT => {{ no_of_cal_days }} ))
                 ),
                tblPeriods AS (
                  SELECT DATE_COL AS SNAPSHOT_DATE FROM tblCAL 
            	  {% if not config.snapshotPeriod == 'Day' %}
            		WHERE LAST_DAY(DATE_COL,{{config.snapshotPeriod}}) = DATE_COL
            	  {% endif%}
                   )
               SELECT
            	{% for col in source.columns %}
            	    {%- if col.name == 'SNAPSHOT_DATE' %} P.SNAPSHOT_DATE
            		{% else %}  {{ get_source_transform(col) }} AS "{{ col.name }}"
            		{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
                FROM tblPeriods P LEFT JOIN {{ ref_no_link(sources[0].dependencies[0].node.location.name, src_table_name) }}
                    ON {{ src_table_name }} {{'.'}} LOAD_DATE < P.SNAPSHOT_DATE
            		WHERE 
            		{% for col in source.columns if col.isBusinessKey -%}
            		  {% if not loop.first %} AND {% endif %}
                           {{ col.name }} IS NOT NULL 
                    {% endfor %}
            	
                    QUALIFY row_number() OVER (PARTITION BY SNAPSHOT_DATE,
            			{% for col in source.columns if col.isBusinessKey -%}
            					{% if not loop.first %} , {% endif %}
            					{{ col.name }}
            			{% endfor %}
            		ORDER BY LOAD_DATE DESC) = 1
                    ORDER BY SNAPSHOT_DATE, 
            		    {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %} , {% endif %}
            				{{ col.name }}
                        {% endfor %}

            {% endfor %}
            	

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Snapshot
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-COALESCE-MISC::13:
    id: COALESCE-MISC::13
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: SQL
        short: SQL
        plural: SQLs
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - displayName: SQL
            attributeName: SQL1
            type: textBox
            syntax: sql
            isRequired: true

        systemColumns:
        - displayName: SQL_SEQ
          transform: ''
          dataType: NUMBER IDENTITY
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_START_DATE
          transform: ''
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate
      templates:
        create:
          templateString: |-
            {{ stage('Create SQL Audit') }}

              CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
        run:
          templateString: |-
            {{ stage('SQL AUDIT') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }} (SYSTEM_START_DATE) SELECT CURRENT_TIMESTAMP

            {% if config.SQL1 %}
            	{{ stage('SQL1') }}
            	{{ config.SQL1 }}
            {% endif %}
    name: SQL
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-COALESCE-MISC::14:
    id: COALESCE-MISC::14
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Copy Into
        short: 'COPY'
        tagColor: '#6ca37b'
        isDisabled: false
        plural: Copy Into
        config:
        - groupName: Source Data
          items:
          - displayName: Stage Name
            attributeName: stageName
            type: textBox
            default: '@'
            isRequired: true

          - displayName: File Name(s) (Optional - Use single quotes and commas)
            attributeName: fileNames
            type: textBox
            isRequired: false

          - displayName: File Pattern (Optional - Use single quotes)
            attributeName: filePattern
            type: textBox
            isRequired: false

        - groupName: File Format
          items:
          - displayName: File Format Definition
            attributeName: fileFormatType
            type: dropdownSelector
            default: "File Format Name"
            options:
            - File Format Name
            - File Format Values
          - displayName: File Format Name
            attributeName: fileFormatName
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.fileFormatType == 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "PARQUET"
            - "JSON"
            - "AVRO"
            - "ORC"
            - "XML"
            isRequired: false
            enableIf: "{% if config.fileFormatType != 'File Format Name' %} true {% else %} false {% endif %}"
          - displayName: Compression
            attributeName: compression
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV','JSON')) %} true {% else %} false {% endif %}"
            type: dropdownSelector
            default: "AUTO"
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false
          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\n"
            isRequired: false
          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: ","
            isRequired: false
          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "\\042"
            isRequired: false
          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            default: "1"
            isRequired: false
          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false
          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{% if (config.fileFormatType != 'File Format Name' and config.fileType in ('CSV')) %} true {% else %} false {% endif %}"
            type: toggleButton
            default: true
            isRequired: false

        systemColumns:
        - displayName: File Name
          transform: metadata$filename
          dataType: VARCHAR
          placement: end
          attributeName: copyFileName

        - displayName: Copy Timestamp
          transform: current_timestamp()
          dataType: timestamp
          placement: end
          attributeName: copyTimestamp

      templates:
        create:
          templateString: |
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

            {{ stage('Create Table') }}
            CREATE OR REPLACE TABLE "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                {%- if col.Description | length > 0 %} COMMENT '{{ col.Description }}'{% endif %}
                {%- if not loop.last -%}, {% endif %}
            {% endfor %}
            )
        run:
          templateString: |-
            {% set srcSchName = node.location.name %}
            {% set db = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set sch = storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}


            {%- if config.filePattern | length > 0 -%} 
                {%- set filePatternSQL = 'PATTERN = ' + config.filePattern -%} 
            {%- else -%}
                {%- set filePatternSQL = "" -%} 
            {%- endif -%}

            {%- if config.fileNames | length > 0 %} 
                {% set fileNameSQL = 'FILES = (' + config.fileNames + ')' %} 
            {%- else -%}
                {% set fileNameSQL = "" %} 
            {% endif %}

            {{ stage('Copy Into') }}
                COPY INTO "{{ db }}"."{{ sch }}"."{{ node.name }}" (
                    {%- for col in columns %}
                        "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                )
                FROM (SELECT
                    {%- for col in sources[0].columns %}
                        {{ col.transform }}
                    {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                     FROM @"{{ db }}"."{{ sch }}"."{{ config.stageName }}") 
                {{- fileNameSQL }}
                {{ filePatternSQL }}
                FILE_FORMAT = (FORMAT_NAME = "{{ db }}"."{{ sch }}".{{ config.fileFormatName}})
    name: Copy Into
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-COALESCE-MISC::15:
    id: COALESCE-MISC::15
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Stream and Insert or Merge
        short: SIM
        tagColor: black
        plural: Streams and Merges

        deployStrategy: advanced

        config:
        - groupName: Stream Options
          items:
          - displayName: Append Only Stream
            attributeName: appendOnly
            type: toggleButton
            default: true
            isRequired: true

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true

        - groupName: Target Loading Options
          items:
          - displayName: Load Type
            attributeName: loadType
            type: dropdownSelector
            default: Insert
            options:
              - Insert
              - Merge
            isRequired: true

          - displayName: Table Key Column(s)
            attributeName: tblKey
            type: columnSelector
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"

          - displayName: Row Update Timestamp Column
            attributeName: tblChgTS
            type: columnSelector
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"
         
        - groupName: Sceduling Options
          items:
          - displayName: Sceduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |+
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {# Source Stream Location and Name #}
            {% set srcSchName = desiredState.sources[0].dependencies[0].node.location.name %}
            {% set srcDb = desiredState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set srcSch = desiredState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set srcTbl = desiredState.sources[0].dependencies[0].node.name %}
            {% set strName = srcTbl + '_STREAM' %}
            {% set fqSrcTblName = '"' + srcDb + '"."' + srcSch + '"."' + srcTbl + '"' %}
            {% set fqStrName = '"' + srcDb + '"."' + srcSch + '"."' + strName + '"' %}
            {% set strFrom = desiredState.sources[0].join | replace(srcTbl, strName) %}

            {# Target Table Info #}
            {% set tgtDb = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {% set tgtTbl = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

            {# Task Info #}
            {% set taskName = desiredState.node.name + '_TASK'  %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {% set tblColid = desiredState.columns | map(attribute='id') | list %}
            {% set tblCol = desiredState.columns | map(attribute='name') | list %}
            {% set tblKey = desiredState.columns | selectattr('tblKey', 'defined') | map(attribute='name') | list %}
            {% set tblColUpd = tblCol | reject('in', tblKeys) | list %}
            {%- set tblKeyColStr = '"'+tblKey | join('", "')+'"' -%}
            {% set recTS = desiredState.columns | selectattr('tblChgTS', 'defined') | map(attribute='name') | first %}

            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ fqStrName }}
                ON TABLE {{ fqSrcTblName }}
                APPEND_ONLY = {% if desiredState.config.appendOnly == true %} TRUE {% else %} FALSE {% endif %}
                SHOW_INITIAL_ROWS = {% if desiredState.config.initialRows == true %} TRUE {% else %} FALSE {% endif %}

                
            {{ stage('Create Target Table') }}
            CREATE OR REPLACE TABLE {{ tgtTbl }}
                (
                {%- for col in desiredState.columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                )

            {{ stage('Create Task') }}
                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}
                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set schedule = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {%- else -%}
                    {%- set schedule = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON + "'" -%} 
                {%- endif -%}
                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set poll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fqStrName + "')" -%} 
                {%- endif -%}
                
                CREATE OR REPLACE TASK 
                    {{ fqTaskName }} 
                    {{ taskType}} 
                    {{ schedule}} 
                    {{ poll }} 
                AS 
                {% if desiredState.config.loadType == 'Insert' -%} 
                INSERT INTO {{ tgtTbl }}
                SELECT {% for id in tblColid %}
                        {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {% set colTran = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if colTran == "" -%}
                          "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                          {{ colTran | replace(srcTbl, strName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                 {{ strFrom }}
                {% else -%}
                MERGE INTO {{ tgtTbl }} tgt USING
                -- Select Statement Preparing Data for Merge
                (SELECT {% for id in tblColid %}
                        {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {% set colTran = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if colTran == "" -%}
                          "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                          {{ colTran | replace(srcTbl, strName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                 {{ strFrom }}
                 QUALIFY ROW_NUMBER() over (partition by {{ tblKeyColStr }} order by "{{ recTS }}" desc) = 1) src
                 -- Join Condition
                 ON {% for col in tblKey -%}
                     src."{{ col }}" = tgt."{{ col }}"
                {% if not loop.last %} AND {% endif %}
                    {%- endfor -%}
                -- What to do if data is matched based on table key
                WHEN MATCHED THEN UPDATE SET 
                    {%- for col in tblColUpd %}
                            tgt."{{ col }}" = src."{{ col }}"
                            {%- if not loop.last -%}, {%- endif %}
                    {%- endfor %}
                -- What to do with new records based on table key
                WHEN NOT MATCHED THEN INSERT 
                    (
                    {%- for col in desiredState.columns -%}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {% endfor %}) 
                VALUES (
                    {%- for col in desiredState.columns -%}
                            src."{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {% endfor %})
                {%- endif -%}

            {{ stage('Resume Task') }}
                ALTER TASK {{ fqTaskName }} RESUME;

            {% elif currentState != undefined and desiredState == undefined %}

            {# Source Stream Location and Name #}
            {% set srcSchName = currentState.sources[0].dependencies[0].node.location.name %}
            {% set srcDb = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
            {% set srcSch = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}
            {% set srcTbl = currentState.sources[0].dependencies[0].node.name %}
            {% set strName = srcTbl + '_STREAM' %}
            {% set fqSrcTblName = '"' + srcDb + '"."' + srcSch + '"."' + srcTbl + '"' %}
            {% set fqStrName = '"' + srcDb + '"."' + srcSch + '"."' + strName + '"' %}
            {% set strFrom = currentState.sources[0].join | replace(srcTbl, strName) %}

            {# Target Table Info #}
            {% set tgtDb = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
            {% set tgtSch = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
            {% set tgtTbl = ref_no_link(currentState.node.location.name, currentState.node.name) %}

            {# Task Info #}
            {% set taskName = currentState.node.name + '_TASK'  %}
            {%- set fqTaskName = tgtDb + '.' + tgtSch + '."' + taskName + '"' -%} 

            {% set tblColid = currentState.columns | map(attribute='id') | list %}
            {% set tblCol = currentState.columns | map(attribute='name') | list %}
            {% set tblKey = currentState.columns | selectattr('tblKey', 'defined') | map(attribute='name') | list %}
            {% set tblColUpd = tblCol | reject('in', tblKeys) | list %}
            {%- set tblKeyColStr = '"'+tblKey | join('", "')+'"' -%}
            {% set recTS = currentState.columns | selectattr('tblChgTS', 'defined') | map(attribute='name') | first %}

            {{ stage('Drop Stream') }}
            DROP STREAM IF EXISTS {{ fqStrName }}
            {{ stage('Drop Table') }}
            DROP TABLE IF EXISTS {{ tgtTbl }}
            {{ stage('Drop Task') }}
            DROP TASK IF EXISTS {{ fqTaskName }} 

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}

        run:
          templateString: ""
    name: Stream and Insert or Merge
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-COALESCE-MISC::16:
    id: COALESCE-MISC::16
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: Dynamic Table
        short: DT
        plural: Dynamic Tables
        tagColor: '#2299C4'

        deployStrategy: advanced

        config:
        - groupName: Dynamic Table
          items:
            
          - displayName: Refresh Warehouse
            attributeName: whName
            type: textBox
            default: 'compute_wh'
            isRequired: true

          - type: tabular
            displayName: 'Lag Specification'
            attributeName: lagSpec
            columns:
          
            -  type: textBox
               displayName: Time Value
               attributeName: lagNumber
               default: 60
               isRequired: true
            
            -  type: dropdownSelector
               displayName: Time Period
               attributeName: lagType
               default: Minutes
               options:
               - Seconds
               - Minutes
               - Hours
               - Days
               isRequired: true
            
            isRequired: true

        - groupName: Change Tracking Options
          items:

          - displayName: Enable Change Tracking
            attributeName: trackChanges
            type: toggleButton
            default: false

          - displayName: Table Key Column(s)
            attributeName: keyColumn
            type: columnSelector
            isRequired: false
            enableIf: "{{ config.trackChanges }}"

          - displayName: Row Update Timestamp Column
            attributeName: timeColumn
            type: columnSelector
            isRequired: false
            enableIf: "{{ config.trackChanges }}"

          - displayName: Propagate Last Non-Delete
            attributeName: nonDelete
            type: toggleButton
            default: false
            enableIf: "{{ config.trackChanges }}"

          - displayName: DML Identifier Column
            attributeName: dmlColumn
            type: columnSelector
            isRequired: false
            enableIf: "{{ config.nonDelete and config.trackChanges }}"
         
          - displayName: Delete Indentifier Value
            attributeName: deleteValue
            type: textBox
            default: 'D'
            isRequired: false
            enableIf: "{{ config.nonDelete and config.trackChanges }}"

          - displayName: Current Values Only
            attributeName: isOnlyCurrent
            type: toggleButton
            default: false
            enableIf: "{{ config.trackChanges }}"
         
        - groupName: Other Options
          items:
          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |-
            {#- Convenience variables for advanced deploy #}
            {#- These can be easily changed when changing deploy strategy #}
            {%- set config = desiredState.config %}
            {%- set locationName = desiredState.node.location.name %}
            {%- set nodeName = desiredState.node.name %}
            {%- set sources = desiredState.sources %}
            {%- set columns = desiredState.columns %}
            {#- Create various lists of columns to work with #}
            {%- set columnList = columns | map(attribute='name') | list %}
            {%- set keyColumnList = columns | selectattr('keyColumn', 'defined') | map(attribute='name') | list %}
            {%- set timeColumnList = columns | selectattr('timeColumn', 'defined') | map(attribute='name') | list %}
            {%- set dmlColumnList = columns | selectattr('dmlColumn', 'defined') | map(attribute='name') | list %}
            {#- The Excluded list of columns depends on certain values #}
            {%- if not config.trackChanges %}
                {%- set excludeList = [] %}
            {%- elif config.trackChanges and not config.nonDelete %}
                {%- set excludeList = (timeColumnList) | unique | list %}
            {%- else %}
                {%- set excludeList = (timeColumnList + dmlColumnList) | unique | list %}
            {%- endif %}
            {%- set includeList = columnList | reject('in', excludeList) | list %}
            {# Turn lists of columns into strings or joined strings where needed #}
            {%- set keyColumns = '"'+keyColumnList | join('", "')+'"' %}
            {%- set timeColumn = timeColumnList | first %}
            {%- set dmlColumn = dmlColumnList | first %}
            {%- set dmlValue = config.deleteValue %}
            {%- set dtLagNumber = config.lagSpec.get('items') | map(attribute='lagNumber') | first %}
            {%- set dtLagType = config.lagSpec.get('items') | map(attribute='lagType') | first %}
            {%- set currentFlag = 'IS_CURRENT' %}
            {%- if desiredState == undefined %}
              DROP DYNAMIC TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
            {%- else %}
            {{- stage('Create Dynamic Table') }}
            CREATE OR REPLACE DYNAMIC TABLE {{ ref_no_link(locationName, nodeName) }}
            	LAG = '{{ dtLagNumber }} {{ dtLagType }}'
            	WAREHOUSE = {{config.whName}}
            AS
            	SELECT
            	{%- for col in includeList %}
            		{%- set colTransform = sources[0].columns | selectattr('name', 'equalto', col) | map(attribute='transform') | first %}
            		{%- set colDesc = columns | selectattr('name', 'equalto', col) | map(attribute='description') | first %}
            		{%- if colTransform == "" %}
            		{%- set colVal = '"' + col + '"' %}
            		{%- else %}
            		{%- set colVal = colTransform %}
            		{%- endif %}
            		{%- if not config.trackChanges %}
            		{{ colVal }} as "{{ col }}"
            		{%- elif not config.nonDelete %}
            		{{ colVal }} as "{{ col }}"                
            		{%- else %}
            		CASE 
            			WHEN "{{ dmlColumn }}" = '{{dmlValue}}' 
            			THEN lag({{colVal}}) over 
            				(partition by {{ keyColumns }} order by "{{ timeColumn }}" asc) 
            			ELSE {{colVal}} 
            		END as "{{ col }}"
            		{%- endif %}{%- if not loop.last -%}, {% endif %}
            	{%- endfor %}
            	{%- if config.trackChanges %}
            		{%- if config.nonDelete %}
            		, "{{ dmlColumn }}" as "{{ dmlColumn }}"
            		{%- endif %}
            		{%- if config.isOnlyCurrent %}
            		, "{{ timeColumn }}" as {{ timeColumn }}
            		{%- elif config.trackChanges %}
            		, "{{ timeColumn }}" as "START_TIME"
            		{%- endif %}
            		{%- if not config.isOnlyCurrent %}
            		, ifnull(
            			timestampadd(
            				'millisecond',-1,lag("{{ timeColumn }}") over 
            					(partition by {{ keyColumns }} 
            					order by "{{ timeColumn }}" desc)
            			),
            			to_timestamp('9999-12-31 23:59:59.999')
            		) as "END_TIME"
            		{%- endif %}
            		, CASE 
            			WHEN (row_number() over 
            					(partition by {{ keyColumns }} 
            						order by "{{ timeColumn }}" desc) = 1) 
            			THEN TRUE 
            			ELSE FALSE 
            		END as "{{currentFlag}}"
            	{%- endif %}
            	{{ sources[0].join }}
            	{%- if config.trackChanges and config.isOnlyCurrent == true  %}
            		QUALIFY "{{currentFlag}}"
            	{%- endif %}
            	{%- endif %}
        run:
          templateString: |-
            {% for test in node.tests if config.testsEnabled %}
                {%- if test.runOrder == 'Before' %}
                    {{ test_stage(test.name, test.continueOnFailure) }}
                    {{ test.templateString }}
                {%- endif %}
            {%- endfor %}

            {%- if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}
            {%- endif %}

            {{- stage('Verify Dynamic Table') }}
            SELECT COUNT(*)
            FROM {{ ref_no_link(node.location.name, node.name) }};
            {%- if config.postSQL %}
                {{- stage('Post-SQL') }}
                {{- config.postSQL }}
            {%- endif %}

            {%- if config.testsEnabled %}
            	{%- for test in node.tests %}
            		{%- if test.runOrder == 'After' %}
            			{{- test_stage(test.name, test.continueOnFailure) }}
            			{{- test.templateString }}
                    {%- endif %}
            	{%- endfor %}

            	{%- for column in columns %}
            		{%- for test in column.tests %}
            			{{- test_stage(column.name + ": " + test.name) }}
            			{{- test.templateString }}
            		{%- endfor %}
            	{%- endfor %}
            {%- endif %}
    name: Dynamic Table
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-COALESCE-MISC::2:
    id: COALESCE-MISC::2
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |
        capitalized: UNLOAD
        short: 'EXPORT'
        tagColor: 'dodgerblue'
        isDisabled: false
        plural: Unloads

        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: Export
            options:
            - "Export"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: CSV
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Overwrite existing files
            attributeName: overwrite
            type: toggleButton
            default: true
            isRequired: false
          - displayName: Single file
            attributeName: singleFile
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false
      templates:
        create:
          templateString: |-
            {{ stage('Nothing to create') }}
            SELECT 1
        run:
          templateString: |-
            {% for source in sources %}
                {% for dep in source.dependencies if dep.node %}
                    {{ stage('Unloading ' + dep.node.name | string ) }}
                    COPY INTO @{{ ref_no_link(node.location.name, config.fileLocation) | trim | upper ~ "/" ~ node.name }}{% if config.singleFile %}.{{ config.fileType | lower }}{% endif %}
                    FROM {{ ref_no_link(dep.node.location.name, dep.node.name) | upper }}
                    overwrite = {{ config.overwrite }}
                    single = {{ config.singleFile }}
                    file_format = (type = {{ config.fileType }}
                    {% if config.fileType == "CSV" %}
                        {% if config.recDelim != null %}record_delimiter = '{{ config.recDelim }}'{% endif %}
                        {% if config.fieldDelim != null %}field_delimiter = '{{ config.fieldDelim }}'{% endif %}
                        {% if config.fieldEnclosed != null %}field_optionally_enclosed_by = '{{ config.fieldEnclosed }}'{% endif %}
                        {% if config.skipHeader != null %}skip_header = {{ config.skipHeader }}{% endif %}
                        {% if config.skipBlankLines %}skip_blank_lines = {{ config.skipBlankLines }}{% endif %}
                        {% if config.trimSpace %}trim_space = {{ config.trimSpace }}{% endif %}
                    {% endif %}
                    )
                {% endfor %}
            {% endfor %}
    name: Unload
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-COALESCE-MISC::7:
    id: COALESCE-MISC::7
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: CDC Table
        short: "CDC"
        tagColor: "#ff33cc"
        plural: CDC Tables

        config:
        - groupName: Stream
          items:
          - displayName: Description
            attributename: description
            type: textBox
            isRequired: false
            default: "A CDC table consists of a few components:\n
              1. A stream on the source node\n
              2. The CDC table which contains a persistent replica of recent CDC records\n
              3. A sequence to keep track of streams\n
              4. Optional: a Task to replicate records from the Stream into the CDC table\n
              "

        - groupName: Task
          items:

          - displayName: Create Task
            enableIf: "{{config.cdcTableEnabled}}"
            attributeName: taskEnabled
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Task Schedule
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskSchedule
            type: dropdownSelector
            default: "Every 30 minutes"
            options:
            - "Every minute"
            - "Every 5 minutes"
            - "Every 30 minutes"
            - "Every hour"
            - "Every day"
            isRequired: false

          - displayName: Warehouse
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskWarehouse
            type: dropdownSelector
            default: "EMEA_TRANSFORM_XS_WH"
            options:
            - "EMEA_TRANSFORM_XS_WH"
            - "EMEA_TRANSFORM_S_WH"
            - "EMEA_TRANSFORM_M_WH"
            - "EMEA_TRANSFORM_L_WH"
            - "COMPUTE_WH"
            isRequired: false

          - displayName: Custom Task Name
            enableIf: "{{config.taskEnabled}}"
            attributeName: taskCustomName
            type: textBox
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: false

        systemColumns:
        - displayName: "METADATA$ACTION"
          transform: "METADATA$ACTION"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataAction
          description: Indicates the DML operation (INSERT, DELETE) recorded.
        - displayName: "METADATA$ISUPDATE"
          transform: "METADATA$ISUPDATE"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataIsUpdate
          description: Indicates whether the operation was part of an UPDATE statement.
        - displayName: "METADATA$ROW_ID"
          transform: "METADATA$ROW_ID"
          dataType: STRING
          placement: end
          attributeName: isStreamMetadataRowId
          description: Specifies the unique and immutable ID for the row, which can be used to track changes to specific rows over time.
        - displayName: "CDC_ID"
          transform: ""
          dataType: INTEGER
          placement: end
          attributeName: isStreamMetadataCDCId
          description: specific CDC identifier based on a sequence.
        - displayName: "CDC_TIMESTAMP"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate
          description: specific attribute containing the timestamp of storing the CDC record.
      templates:
        create:
          templateString: |-
            {{ stage('Create Stream') }}

            CREATE OR REPLACE STREAM {{ ref_no_link(node.location.name, "STR_" + node.name) }}
            ON TABLE {{ ref(sources[0].dependencies[0].node.location.name, sources[0].dependencies[0].node.name) }}
            APPEND_ONLY = FALSE
            COMMENT = 'CDC Stream on {{ ref(node.location.name, sources[0].dependencies[0].node.name) }}'

            {{ stage('Create Sequence') }}

            CREATE OR REPLACE SEQUENCE {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}

            {{ stage('Create CDC Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            {% if config.taskEnabled is true %}

                {{ stage('Create Task') }}

                CREATE OR REPLACE TASK 
                {% if config.taskCustomName != '' %}
                    {{ ref_no_link(node.location.name, config.taskCustomName) }}
                {% else %}
                    {{ ref_no_link(node.location.name, "TSK_" + node.name) }}
                {% endif %}
                WAREHOUSE = {{config.taskWarehouse}}
             
                SCHEDULE = 
                {% if config.taskSchedule == 'Every minute' %}
                    '1 MINUTE'
                {% elif config.taskSchedule == 'Every 5 minutes' %}
                    '5 MINUTE'
                {% elif config.taskSchedule == 'Every 30 minutes' %}
                    '30 MINUTE'
                {% elif config.taskSchedule == 'Every hour' %}
                    '60 MINUTE'
                {% elif config.taskSchedule == 'Every day' %}
                    '3600 MINUTE'
                {% else %}
                    'INVALID'
                {% endif %}
                COMMENT='Task to copy data of stream STR_{{node.name}} to CDC Table {{node.name}}'
                WHEN SYSTEM$STREAM_HAS_DATA('{{ ref_no_link(node.location.name, "STR_" + node.name) }}')
                AS
                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.name == 'CDC_ID' %}
                            SEQ_{{node.name}}.NEXTVAL
                        {% elif col.transform | trim != '' %}
                            {{ col.transform.replace(source.dependencies[0].node.name, 'STR_' + node.name) }}
                        {% elif col.sourceColumns[0].column and col.sourceColumns[0].column.name %}
                            "STR_{{ node.name }}"."{{ col.sourceColumns[0].column.name }}"
                        {% else %}
                            NULL
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    FROM {{ ref_no_link(node.location.name, "STR_" + node.name) }}

                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                        {{config.insertStrategy}}
                    {% endif %}

                {% endfor %}

            {% endif %}
        run:
          templateString: |-
            {% if config.taskEnabled is true %}

                {{ stage('Resume Task') }}

                ALTER TASK 
                {% if config.taskCustomName != '' %}
                    {{ ref_no_link(node.location.name, config.taskCustomName) }}
                {% else %}
                    {{ ref_no_link(node.location.name, "TSK_" + node.name) }}
                {% endif %}
                RESUME

            {% else %}

                {{ stage('Insert From Stream') }}

                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

                {% for source in sources %}
                
                    SELECT
                    {% for col in source.columns %}
                        {% if col.name == 'CDC_ID' %}
                            {{ ref_no_link(node.location.name, "SEQ_" + node.name) }}.NEXTVAL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    FROM {{ ref_no_link(node.location.name, "STR_" + node.name) }} AS "{{ sources[0].dependencies[0].node.name }}"

                    {% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
                        {{config.insertStrategy}}
                    {% endif %}

                {% endfor %}

            {% endif %}
    name: CDC Table
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-COALESCE-MISC::8:
    id: COALESCE-MISC::8
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |+
        capitalized: Stage Date
        short: DATE
        plural: Dates
        tagColor: 'black'

        config:
        - groupName: Date Options
          items:
          - displayName: Starting Date
            attributeName: startingDate
            type: textBox
            syntax: sql
            default: 'DATEADD(DAY, -730, CURRENT_DATE)'

          - displayName: Number of Days to Generate
            attributeName: daysToGenerate
            type: textBox
            default: '2000'

          - displayName: Generated Date Column Name
            attributeName: dateColumnName
            type: textBox
            default: '"DATE_COL"'

        - groupName: Additional Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true
            isRequired: true

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: DATE_KEY
          transform: '{{ config.dateColumnName }}'
          dataType: 'DATE'
          placement: beginning
          attributeName: isDate

        - displayName: 'YEAR'
          transform: 'YEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isYear

        - displayName: 'MONTH'
          transform: 'MONTH({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isMonth

        - displayName: 'MONTH_NAME'
          transform: 'MONTHNAME({{ config.dateColumnName }})'
          dataType: CHAR(3)
          placement: beginning
          attributeName: isMonthName

        - displayName: 'DAY_OF_MONTH'
          transform: 'DAY({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isDayOfMonth

        - displayName: 'DAY_OF_WEEK'
          transform: 'DAYOFWEEK({{ config.dateColumnName }})'
          dataType: VARCHAR(9)
          placement: beginning
          attributeName: isDayOfWeek

        - displayName: 'WEEK_OF_YEAR'
          transform: 'WEEKOFYEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isWeekOfYear

        - displayName: 'DAY_OF_YEAR'
          transform: 'DAYOFYEAR({{ config.dateColumnName }})'
          dataType: SMALLINT
          placement: beginning
          attributeName: isYearColumn



      templates:
        create:
          templateString: |+
            {{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

        run:
          templateString: |
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}
            {% endif %}


            {% if config.truncateBefore %}
                {{ stage('Truncate Stage Table') }}
                TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            {% endif %}


            {{ stage('Insert ' + sources[0].name | string ) }}

                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in sources[0].columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )

                WITH CTE_DATE_GENERATOR AS (
                    SELECT DATEADD(DAY, SEQ4(), {{config.startingDate }}) AS {{ config.dateColumnName }}
                    FROM TABLE(GENERATOR(ROWCOUNT=>{{ config.daysToGenerate }}))
                )

                SELECT
                {% for col in sources[0].columns %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}

                FROM CTE_DATE_GENERATOR

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}
            {% endif %}
    name: DATE
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-COALESCE-MISC::9:
    id: COALESCE-MISC::9
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: External Table
        short: 'EXT'
        tagColor: '#C39BD3'
        isDisabled: false
        plural: External Tables

        deployStrategy: advanced
        config:
        - groupName: File Location
          items: 

          - displayName: Stage
            attributeName: fileLocation
            type: dropdownSelector
            default: TPCH
            options:
            - "TPCH"
            - "UserData"
            - "UserData_Delta"
            - "RefData"
            - "s3_lineitem_json"
            isRequired: true

          - displayName: File Pattern
            attributeName: filePattern
            type: textBox
            default: ".*[.]json"
            isRequired: true

        - groupName: File Format 
          items:
          - displayName: File Type
            attributeName: fileType
            type: dropdownSelector
            default: JSON
            options:
            - "CSV"
            - "JSON"
            - "Parquet"
            isRequired: true

          - displayName: Compression
            attributeName: compression
            enableIf: "{{ config.fileType in ['CSV','JSON'] }}" 
            type: dropdownSelector
            default: AUTO
            options:
            - "AUTO"
            - "GZIP"
            - "BZ2"
            - "BROTLI"
            - "ZSTD"
            - "DEFLATE"
            - "RAW_DEFLATE"
            - "NONE"
            isRequired: false

          - displayName: Record delimiter
            attributeName: recDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\n"
            isRequired: false

          - displayName: Field delimiter
            attributeName: fieldDelim
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: ","
            isRequired: false

          - displayName: Field optionally enclosed by
            attributeName: fieldEnclosed
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "\\042"
            isRequired: false

          - displayName: Number of header lines to skip
            attributeName: skipHeader
            type: textBox
            enableIf: "{{ config.fileType == 'CSV'}}" 
            default: "1"
            isRequired: false

          - displayName: Skip blank lines
            attributeName: skipBlankLines
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

          - displayName: Trim space
            attributeName: trimSpace
            enableIf: "{{ config.fileType == 'CSV'}}" 
            type: toggleButton
            default: true
            isRequired: false

        - groupName: Additional Options
          items:
          - displayName: Auto Refresh
            attributeName: autoRefresh
            type: toggleButton
            default: false
            isRequired: false

          - displayName: AWS SNS Topic
            attributeName: snsTopic
            type: textBox
            enableIf: "{{ config.autoRefresh }}"
            default: "arn:aws:sns:us-east-1:121674918127:prod-emea-s3-notification"
            isRequired: false

        - groupName: Hidden config
          enableIf: "false"
          items:
          - displayName: Type
            type: materializationSelector
            default: table
            options:
            - table
            isRequired: true

        systemColumns:

        - displayName: 'VALUE'
          attributeName: 'VALUE'
          transform: ''
          dataType: VARIANT
          placement: beginning
        - displayName: 'METADATA$FILENAME'
          attributeName: 'METADATA$FILENAME'
          transform: ''
          dataType: STRING
          placement: end
      templates:
        create:
          templateString: |-
            {% if desiredState == undefined %}

              DROP EXTERNAL TABLE {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}

            {% else %}

            {{ stage('Create External Table') }}

            CREATE OR REPLACE EXTERNAL TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              {% if desiredState.config.fileType == "CSV" %}
                {% for col in desiredState.sources[0].columns if (col.name | upper != "VALUE" and col.name | upper != "METADATA$FILENAME") %}
                  {% if loop.first %}({% endif %}
                    "{{ col.name }}" {{ col.dataType }} AS (value:c{{ loop.index }}::{{ col.dataType }})
                  {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                  {%- if not loop.last -%}, {% else %}){% endif %}
                {% endfor %}
              {% endif %}
              
              with location = @{{ ref_no_link(desiredState.node.location.name, desiredState.config.fileLocation | upper) | trim }}
              pattern='{{ desiredState.config.filePattern }}'
              file_format = (type = {{ desiredState.config.fileType }}
              {% if desiredState.config.fileType == "CSV" %}
                {% if desiredState.config.recDelim != null %}record_delimiter = '{{ desiredState.config.recDelim }}'{% endif %}
                {% if desiredState.config.fieldDelim != null %}field_delimiter = '{{ desiredState.config.fieldDelim }}'{% endif %}
                {% if desiredState.config.fieldEnclosed != null %}field_optionally_enclosed_by = '{{ desiredState.config.fieldEnclosed }}'{% endif %}
                {% if desiredState.config.skipHeader != null %}skip_header = {{ desiredState.config.skipHeader }}{% endif %}
                {% if desiredState.config.skipBlankLines %}skip_blank_lines = {{ desiredState.config.skipBlankLines }}{% endif %}
                {% if desiredState.config.trimSpace %}trim_space = {{ desiredState.config.trimSpace }}{% endif %}
              {% endif %}
              )
              auto_refresh = {{ desiredState.config.autoRefresh }}
              {% if desiredState.config.autoRefresh and desiredState.config.snsTopic != null %}aws_sns_topic = '{{ config.snsTopic }}'{% endif %}
              {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description }}'{% endif %}
            ;
            {% endif %}
        run:
          templateString: |-
            {% if config.autoRefresh is false %}
            {{ stage('Refresh External Table') }}
            ALTER EXTERNAL TABLE {{ ref_no_link(node.location.name, node.name) }} REFRESH
            {% endif %}
    name: External Table
    packageInfo:
      id: COALESCE-MISC
      version: https://github.com/Coalesce-Software-Inc/packages.git#misc_nodes
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: DW
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: DW
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isHubHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	
            	{% endif %}

            			
            	{{ stage('Merge Link') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isLinkHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Link
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::12:
    id: SCALEFREE-DATAVAULT4COALESCE::12
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: PIT'
        short: 'PIT'
        tagColor: '#C0C0C0'
        plural: 'DATAVAULT BY SCALEFREE: PITS'

        config:
        - groupName: Data Vault
          items:
          - displayName: Dimension Key Column
            type: columnSelector
            attributeName: is_dimension_key
            isRequired: true

          - displayName: Clean Up PIT
            type: toggleButton
            attributeName: cleanup_pit
            default: true
      templates:
        create:
          templateString: |-
            {{ stage('Create PIT Table') }}

            {%- set ns = namespace(sdts_datatype = '') %}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}

            {%- set loc = storageLocations | selectattr('name', "eq", node.location.name) | list | first -%}
            {%- set target_database = loc.database -%}
            {%- set target_schema = loc.name -%}
            {%- set target_node = node.name -%}

            {%- set ns = namespace(sdts_node_name='', hub_node_name='') -%}

            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH records_to_insert AS (
            	SELECT
            	{% for col in sources[0].columns %}

            		{% if 'column' in col.sourceColumns[0].keys() -%}

            			{%- set source_node_name = col.sourceColumns[0].node.name -%}
            			{%- set source_column_name = col.sourceColumns[0].column.name -%}
            			{%- set target_column_name = col.name -%}

            			{%- if col.sourceColumns[0].column.is_Hub_hk -%}
                            {%- set ns.hub_node_name = source_node_name -%}
            				COALESCE("{{ source_node_name }}"."{{ target_column_name }}", {{ datavault4coalesce__unknown_key() }}) AS "{{ target_column_name }}"
            			{%- elif col.sourceColumns[0].column.is_hk -%}
            				COALESCE("{{ source_node_name }}"."{{ source_column_name }}", {{ datavault4coalesce__unknown_key() }}) AS "{{ target_column_name }}"			
            			{%- elif source_column_name == datavault4coalesce.config.ldts_alias -%}
            				COALESCE("{{ source_node_name }}"."{{ source_column_name }}", {{ datavault4coalesce__string_to_timestamp(datavault4coalesce.config.timestamp_format, datavault4coalesce.config.beginning_of_all_times) }}) AS "{{ target_column_name }}"
            			{%- elif col.name == datavault4coalesce.config.sdts_alias -%}
            				"{{ source_node_name }}"."{{ target_column_name }}" AS "{{ target_column_name }}"

                            {%- set ns.sdts_node_name = col.sourceColumns[0].node.name -%}

            			{%- else -%}
            				"{{ source_node_name }}"."{{ source_column_name }}" AS "{{ target_column_name }}"
            			{%- endif %}

            		{%- if not loop.last -%} , {% endif %}
            		{%- elif col.is_dimension_key -%}
            			{{ get_source_transform(col) }} AS "{{ col.name }}",
            		{%- endif %}

                {% endfor %}

            	FROM {{ ref(target_schema, ns.hub_node_name) }} "{{ ns.hub_node_name }}"

            	{% for col in sources[0].columns -%}
            		{%- if col.name == datavault4coalesce.config.sdts_alias -%}

                        {%- set source_node_name = col.sourceColumns[0].node.name -%}
            			{%- set source_node_schema = col.sourceColumns[0].node.location.name -%}

            			JOIN {{ ref(source_node_schema, source_node_name) }} "{{ source_node_name }}"
            			ON "{{ source_node_name }}"."{{ datavault4coalesce.config.snapshot_trigger_column }}" = true
            		{%- endif -%}
            	{% endfor %}

            	{%- for col in sources[0].columns %}
            		
            		{%- if 'column' in col.sourceColumns[0].keys() %}
            			{%- if col.sourceColumns[0].column.is_hk and not loop.first %}

                            {%- set source_node_name = col.sourceColumns[0].node.name -%}
            				{%- set source_node_schema = col.sourceColumns[0].node.location.name -%}
                            {%- set source_column_name = col.sourceColumns[0].column.name -%}
                            {%- set target_node = node.name -%}

            				LEFT JOIN {{ ref(source_node_schema, source_node_name) }} "{{ source_node_name }}"
            				ON "{{ ns.hub_node_name }}"."{{ source_column_name }}" = "{{ source_node_name }}"."{{ source_column_name }}"
            				
                            {% for sdts_col in sources[0].columns %}

            					{%- if sdts_col.name == datavault4coalesce.config.sdts_alias -%}
            						AND "{{ ns.sdts_node_name }}"."{{ sdts_col.name}}" BETWEEN "{{ source_node_name }}"."{{ datavault4coalesce.config.ldts_alias }}" and "{{ source_node_name }}"."{{ datavault4coalesce.config.ledts_alias }}"
            					{%- endif -%}
            				{%- endfor -%}
            			
            			{% endif %}
            		{%- endif %}
            	{% endfor -%}
            )

            SELECT * FROM records_to_insert
            WHERE "{{ get_value_by_column_attribute('is_dimension_key') }}" NOT IN 
            (
            	SELECT "{{ get_value_by_column_attribute('is_dimension_key') }}" FROM 
            	{{ ref_no_link(node.location.name, node.name) }}
            )


            {% if config.cleanup_pit %}

            {{ stage('Clean up PIT') }}

            	DELETE FROM {{ ref_no_link(node.location.name, node.name) }}
            	WHERE "{{ datavault4coalesce.config.sdts_alias }}" NOT IN (
                SELECT "{{ datavault4coalesce.config.sdts_alias }}" FROM 
                {% for col in sources[0].columns %}
                    {%- if col.name == datavault4coalesce.config.sdts_alias -%}
                        {%- set snapshot_loc = storageLocations | selectattr('name', "eq", col.sourceColumns[0].node.location.name) | list | first -%}
                        {%- set snapshot_node_name = col.sourceColumns[0].node.name -%}
                        "{{ snapshot_loc.database }}"."{{ snapshot_loc.schema }}"."{{ snapshot_node_name }}"
                    {%- endif -%}
                {%- endfor %}
                WHERE "{{ datavault4coalesce.config.snapshot_trigger_column }}" = true
            		)
            {% endif %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "Datavault by Scalefree: PIT"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::13:
    id: SCALEFREE-DATAVAULT4COALESCE::13
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SNAPSHOT V0'
        short: 'SNAPSHOTV0'
        plural: 'DATAVAULT BY SCALEFREE: SNAPSHOTS V0'
        tagColor: '#1E8449'

        config:
        - groupName: Data Vault
          items:
          - displayName: Snapshot Start Date (yyyy-mm-dd)
            type: textBox
            attributeName: input_snapshot_start_date
            isRequired: true
            default: "2020-01-01"

          - displayName: Snapshot End Date (yyyy-mm-dd)
            type: textBox
            attributeName: input_snapshot_end_date
            isRequired: true
            default: "2025-12-31"

          - displayName: Daily Snapshot Time (hh:mm:ss)
            type: textBox
            attributeName: input_daily_snapshot_time
            isRequired: true
            default: "07:00:00"

          - type: materializationSelector
            default: table
            options:
            - table
            isRequired: true
            enableIf: "false"     

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false


        systemColumns:
        - displayName: "SDTS"
          transform: ""
          dataType: TIMESTAMP
          placement: end
          attributeName: system_sdts

        - displayName: "FORCE_ACTIVE"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_force_active

        - displayName: "REPLACEMENT_SDTS"
          transform: ""
          dataType: TIMESTAMP
          placement: end
          attributeName: system_replacement_sdts

        - displayName: "CAPTION"
          transform: ""
          dataType: STRING
          placement: end
          attributeName: system_caption

        - displayName: "IS_HOURLY"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_hourly

        - displayName: "IS_DAILY"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_daily

        - displayName: "IS_BEGINNING_OF_WEEK"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_week

        - displayName: "IS_BEGINNING_OF_MONTH"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_month

        - displayName: "IS_BEGINNING_OF_QUARTER"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_quarter

        - displayName: "IS_BEGINNING_OF_YEAR"
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_beginning_of_year
      templates:
        create:
          templateString: |-
            {{ stage('Create Snapshot v0 Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {{ stage('Insert New Rows') }}

            {%- set timestamp_format = datavault4coalesce.config.timestamp_format -%}
            {%- set start_date = config.input_snapshot_start_date -%}
            {%- set end_date = config.input_snapshot_end_date -%}
            {%- set daily_snapshot_time = config.input_daily_snapshot_time -%}

            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

            WITH "date_base" AS (
                SELECT
                    "sdts" as "{{ datavault4coalesce.config.sdts_alias }}",
                    TRUE as "force_active",
                    "sdts" AS "replacement_sdts",
                    CONCAT('Snapshot ', DATE("sdts")) AS "caption",
                    CASE
                        WHEN EXTRACT(MINUTE FROM "sdts") = 0 AND EXTRACT(SECOND FROM "sdts") = 0 THEN TRUE
                        ELSE FALSE
                    END AS "is_hourly",
                    CASE
                        WHEN EXTRACT(HOUR FROM "sdts") = 0 AND EXTRACT(MINUTE FROM "sdts") = 0 AND EXTRACT(SECOND FROM "sdts") = 0 THEN TRUE
                        ELSE FALSE
                    END AS "is_daily",
                    CASE
                        WHEN EXTRACT(DAYOFWEEK FROM  "sdts") = 1 THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_week",
                    CASE
                        WHEN EXTRACT(DAY FROM "sdts") = 1 THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_month",
                    CASE
                        WHEN EXTRACT(DAY FROM "sdts") = 1 AND EXTRACT(MONTH FROM "sdts") in (1, 4, 7, 10) THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_quarter",  
                    CASE
                        WHEN EXTRACT(DAY FROM "sdts") = 1 AND EXTRACT(MONTH FROM "sdts") = 1 THEN TRUE
                        ELSE FALSE
                    END AS "is_beginning_of_year"
                FROM 
                (
                    SELECT
                        DATEADD(DAY, SEQ4(), 
                        TIMESTAMPADD(SECOND, EXTRACT(SECOND FROM TO_TIME('{{ daily_snapshot_time }}')), 
                        TIMESTAMPADD(MINUTE, EXTRACT(MINUTE FROM TO_TIME('{{ daily_snapshot_time }}')), 
                        TIMESTAMPADD(HOUR, EXTRACT(HOUR FROM TO_TIME('{{ daily_snapshot_time }}')), TO_DATE('{{ start_date }}', 'YYYY-MM-DD')))
                        ))::TIMESTAMP AS "sdts"
                    FROM 
                        TABLE(GENERATOR(ROWCOUNT => 100000))
                    WHERE 
                        "sdts" <= TO_DATE('{{ end_date }}', 'YYYY-MM-DD')
                ) 
            ),

            "records_to_insert" AS (

                SELECT 
                    "date_base".*
                FROM "date_base"
                LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "tgt"
                    ON "date_base"."{{ datavault4coalesce.config.sdts_alias }}" = "tgt"."{{ datavault4coalesce.config.sdts_alias }}"
                WHERE "tgt"."{{ datavault4coalesce.config.sdts_alias }}" IS NULL

            )

            SELECT * FROM "records_to_insert"

            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
    name: "Datavault by Scalefree: Snapshot v0"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::14:
    id: SCALEFREE-DATAVAULT4COALESCE::14
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SNAPSHOT V1'
        short: 'SNAPSHOTV1'
        plural: 'DATAVAULT BY SCALEFREE: SNAPSHOTS V1'
        tagColor: '#58D68D'

        config:

        - groupName: Use Logarithmic Logic
          items:
          - displayName: Use Logarithmic Logic
            type: toggleButton
            attributeName: use_logarithmic_logic
            enableIf: 'true'
            isRequired: true
            default: true
          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
            enableIf: "false"    

        - groupName: Daily Snapshot Logic
          enableIf: "{{ config.use_logarithmic_logic }}"
          items:
          - displayName: Keep Daily Snapshots forever
            type: toggleButton
            attributeName: daily_snapshots_forever
            enableIf: "{{ config.use_logarithmic_logic }}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: daily_snapshot_duration
            enableIf: "{% if not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "30"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: daily_snapshot_unit
            enableIf: "{% if not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: DAY
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR
            
        - groupName: Weekly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Weekly Snapshots forever
            type: toggleButton
            attributeName: weekly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: weekly_snapshot_duration
            enableIf: "{% if not config.weekly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "1"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: weekly_snapshot_unit
            enableIf: "{% if not config.weekly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}" 
            isRequired: true
            default: "YEAR"
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR   

        - groupName: Monthly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Monthly Snapshots forever
            type: toggleButton
            attributeName: monthly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: monthly_snapshot_duration
            enableIf: "{% if not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "3"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: monthly_snapshot_unit
            enableIf: "{% if not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: YEAR
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR

        - groupName: Quarterly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Quarterly Snapshots forever
            type: toggleButton
            attributeName: quarterly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: quarterly_snapshot_duration
            enableIf: "{% if not config.quarterly_snapshots_forever and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "5"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: quarterly_snapshot_unit
            enableIf: "{% if not config.quarterly_snapshots_forever and not config.daily_snapshots_forever and not config.monthly_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: YEAR
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR
            
        - groupName: Yearly Snapshot Logic
          enableIf: "{% if config.use_logarithmic_logic and not config.quarterly_snapshots_forever and not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
          items:
          - displayName: Keep Yearly Snapshots forever
            type: toggleButton
            attributeName: yearly_snapshots_forever
            enableIf: "{% if config.use_logarithmic_logic and not config.quarterly_snapshots_forever and not config.monthly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: false

          - displayName: Duration
            type: textBox
            attributeName: yearly_snapshot_duration
            enableIf: "{% if not config.yearly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}"
            isRequired: true
            default: "10"

          - displayName: Time Unit
            type: dropdownSelector
            attributeName: yearly_snapshot_unit
            enableIf: "{% if not config.yearly_snapshots_forever and not config.daily_snapshots_forever %} true {% else %} false {% endif %}" 
            isRequired: true
            default: YEAR
            options:
            - DAY
            - WEEK
            - MONTH
            - QUARTER
            - YEAR  

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false


        systemColumns:
        - displayName: IS_ACTIVE
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_active

        - displayName: IS_LATEST
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_latest

        - displayName: IS_CURRENT_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_current_year

        - displayName: IS_LAST_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_last_year

        - displayName: IS_ROLLING_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_rolling_year

        - displayName: IS_LAST_ROLLING_YEAR
          transform: ""
          dataType: BOOLEAN
          placement: end
          attributeName: system_is_last_rolling_year
      templates:
        create:
          templateString: |-
            {{ stage('Create Snapshot v1 View') }}

            {% if config.use_logarithmic_logic %}
                {%-set log_logic = {
                'daily':        {'duration': config.daily_snapshot_duration|int,
                                'unit': '{{config.daily_snapshot_unit}}',
                                'forever': '{{config.daily_snapshots_forever}}'},
                'weekly':       {'duration': config.weekly_snapshot_duration|int,
                                'unit': '{{config.weekly_snapshot_unit}}',
                                'forever': '{{config.weekly_snapshots_forever}}'},
                'monthly':      {'duration': config.monthly_snapshot_duration|int,
                                'unit': '{{config.monthly_snapshot_unit}}',
                                'forever': '{{config.monthly_snapshots_forever}}'},
                'quarterly':    {'duration': config.quarterly_snapshot_duration|int,
                                'unit': '{{config.quarterly_snapshot_unit}}',
                                'forever': '{{config.quarterly_snapshots_forever}}'},
                'yearly':       {'duration': config.yearly_snapshot_duration|int,
                                'unit': '{{config.yearly_snapshot_unit}}',
                                'forever': '{{config.yearly_snapshots_forever}}'},
                    } 
                %}
            {% else %}
                {% set log_logic = none %}
            {% endif %}

            {% set sdts_alias = datavault4coalesce.config.sdts_alias %}
            {% set ns = namespace(forever_status=FALSE) %}
            {% set snapshot_trigger_column = 'IS_ACTIVE' %}


            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
            		"{{ col.name }}"
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            AS
            WITH latest_row AS (

                SELECT
                    "{{ sdts_alias }}"
                FROM {{ ref(sources[0].columns[0].sourceColumns[0].node.location.name, sources[0].columns[0].sourceColumns[0].node.name) }}
                WHERE "{{ sdts_alias }}" <= SYSDATE()
                ORDER BY "{{ sdts_alias }}" DESC
                LIMIT 1

            ), 

            virtual_logic AS (
                
                SELECT
                    c."{{ sdts_alias }}",
                    c."REPLACEMENT_SDTS",
                    c."FORCE_ACTIVE",
                    {%- if log_logic is none %}
                    TRUE AS {{ snapshot_trigger_column }},
                    {%- else %}
                    CASE 
                        WHEN
                        {% if 'daily' in log_logic.keys() %}
                            {%- if log_logic['daily']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' -%}
                              (1=1)
                            {%- else %}
                                {%- set daily_duration = log_logic['daily']['duration'] -%}
                                {%- set daily_unit = log_logic['daily']['unit'] -%}
                              (DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ daily_duration }} {{ daily_unit }}' AND SYSDATE())
                            {%- endif -%}   
                        {%- endif %}

                        {%- if 'weekly' in log_logic.keys() %} OR 
                            {%- if log_logic['weekly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' -%}
                          (c."IS_BEGINNING_OF_WEEK" = TRUE)
                            {%- else %} 
                                {%- set weekly_duration = log_logic['weekly']['duration'] -%}
                                {%- set weekly_unit = log_logic['weekly']['unit'] %}            
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ weekly_duration }} {{ weekly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_WEEK" = TRUE))
                            {%- endif -%}
                        {% endif -%}

                        {%- if 'monthly' in log_logic.keys() %} OR
                            {%- if log_logic['monthly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' %}
                          (c."IS_BEGINNING_OF_MONTH" = TRUE)
                            {%- else %}
                                {%- set monthly_duration = log_logic['monthly']['duration'] -%}
                                {%- set monthly_unit = log_logic['monthly']['unit'] %}            
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ monthly_duration }} {{ monthly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_MONTH" = TRUE))
                            {%- endif -%}
                        {% endif -%}

                        {%- if 'quarterly' in log_logic.keys() %} OR
                            {%- if log_logic['quarterly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' %}
                          (c."IS_BEGINNING_OF_QUARTER" = TRUE)
                            {%- else %}
                                {%- set quarterly_duration = log_logic['quarterly']['duration'] -%}
                                {%- set quarterly_unit = log_logic['quarterly']['unit'] %}            
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ quarterly_duration }} {{ quarterly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_QUARTER" = TRUE))
                            {%- endif -%}
                        {% endif -%}

                        {%- if 'yearly' in log_logic.keys() %} OR 
                            {%- if log_logic['yearly']['forever'] is true -%}
                                {%- set ns.forever_status = 'TRUE' %}
                          (c."IS_BEGINNING_OF_YEAR" = TRUE)
                            {%- else %}
                                {%- set yearly_duration = log_logic['yearly']['duration'] -%}
                                {%- set yearly_unit = log_logic['yearly']['unit'] %}                    
                          ((DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN SYSDATE() - INTERVAL '{{ yearly_duration }} {{ yearly_unit }}' AND SYSDATE()) AND (c."IS_BEGINNING_OF_YEAR" = TRUE))
                            {%- endif -%}
                        {% endif %}
                        THEN TRUE
                        ELSE FALSE
                    END AS {{ snapshot_trigger_column }},
                    {%- endif %}

                    CASE
                        WHEN l."{{ sdts_alias }}" IS NULL THEN FALSE
                        ELSE TRUE
                    END AS "IS_LATEST",

                    c."CAPTION",
                    c."IS_HOURLY",
                    c."IS_DAILY",
                    c."IS_BEGINNING_OF_WEEK",
                    c."IS_BEGINNING_OF_MONTH",
                    c."IS_BEGINNING_OF_QUARTER",
                    c."IS_BEGINNING_OF_YEAR",
                    CASE
                        WHEN EXTRACT(YEAR FROM c."{{ sdts_alias }}") = EXTRACT(YEAR FROM SYSDATE()) THEN TRUE
                        ELSE FALSE
                    END AS "IS_CURRENT_YEAR",
                    CASE
                        WHEN EXTRACT(YEAR FROM c."{{ sdts_alias }}") = EXTRACT(YEAR FROM SYSDATE())-1 THEN TRUE
                        ELSE FALSE
                    END AS "IS_LAST_YEAR",
                    CASE
                        WHEN DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN (SYSDATE() - INTERVAL '1 YEAR') AND SYSDATE() THEN TRUE
                        ELSE FALSE
                    END AS "IS_ROLLING_YEAR",
                    CASE
                        WHEN DATE_TRUNC('DAY', c."{{ sdts_alias }}"::DATE) BETWEEN (SYSDATE() - INTERVAL '2 YEAR') AND (SYSDATE() - INTERVAL '1 YEAR') THEN TRUE
                        ELSE FALSE
                    END AS "IS_LAST_ROLLING_YEAR"
                FROM {{ ref(sources[0].columns[0].sourceColumns[0].node.location.name, sources[0].columns[0].sourceColumns[0].node.name) }} c
                LEFT JOIN latest_row l
                ON c."{{ sdts_alias }}" = l."{{ sdts_alias }}"
                WHERE c."{{ sdts_alias }}" < SYSDATE()
            ),

            active_logic_combined AS (

                SELECT 
                    "{{ sdts_alias }}",
                    "FORCE_ACTIVE",
                    "REPLACEMENT_SDTS",
                    "CAPTION",
                    "IS_HOURLY",
                    "IS_DAILY",
                    "IS_BEGINNING_OF_WEEK",
                    "IS_BEGINNING_OF_MONTH",
                    "IS_BEGINNING_OF_QUARTER",
                    "IS_BEGINNING_OF_YEAR",
                    CASE
                        WHEN "FORCE_ACTIVE" AND {{ snapshot_trigger_column }} THEN TRUE
                        WHEN NOT "FORCE_ACTIVE" OR NOT {{ snapshot_trigger_column }} THEN FALSE
                    END AS "{{ snapshot_trigger_column }}",
                    "IS_LATEST",         
                    "IS_CURRENT_YEAR",
                    "IS_LAST_YEAR",
                    "IS_ROLLING_YEAR",
                    "IS_LAST_ROLLING_YEAR"
                FROM virtual_logic
                ORDER BY "{{ sdts_alias }}" DESC
            )

            SELECT * FROM active_logic_combined
        run:
          templateString: ""
    name: "Datavault by Scalefree: Snapshot v1"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::4:
    id: SCALEFREE-DATAVAULT4COALESCE::4
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: STAGE'
        short: DVSTG
        plural: 'DATAVAULT BY SCALEFREE: STAGES'
        tagColor: '#AED6F1'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: view
            options:
            - view
            isRequired: true
            enableIf: "false"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true

        - groupName: Data Vault
          items:
          - displayName: Generate Ghost Records
            attributeName: generate_ghost_records
            type: toggleButton
            default: true

        systemColumns:
        - displayName: "LDTS"
          transform: SYSDATE()
          dataType: TIMESTAMP
          placement: end
          attributeName: is_system_ldts    
          description: "The Load Date Timestamp (LDTS) describes when this data first arrived in the Data Warehouse."
        - displayName: "RSRC"
          transform: "{{record_source()}}"
          dataType: STRING
          placement: end
          attributeName: is_system_rsrc    
          description: "The Record Source (RSRC) describes the source of this data."  
      templates:
        create:
          templateString: |-
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}

            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        {%- if col.is_rsrc_column -%}
                            "{{datavault4coalesce.config.rsrc_alias}}"
                        {%- elif col.is_ldts_column -%}
                            "{{datavault4coalesce.config.ldts_alias}}"
                        {% else %}
                            "{{ col.name }}"
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {% if col.hashDetails %}
                            {{ datavault4coalesce__hash(columns=col.hashDetails.columns, datatype=col.dataType, algo=col.hashDetails.algorithm) }} AS "{{ col.name }}"
                        {% else %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}

                    {%- if config.generate_ghost_records -%}

                        UNION ALL 

                        SELECT

                        {% for source in sources %}
                            {% for col in source.columns %}
                                {%- if "hashDetails" in col.keys() %}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'unknown', hash=true, hash_algo=col.hashDetails.algorithm) }}
                                {%- else -%}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'unknown', hash=false) }}
                                {%- endif -%}
                            {% if not loop.last %},{% endif %}
                            {% endfor %}
                        {% endfor %}

                        UNION ALL 

                        SELECT

                        {% for source in sources %}
                            {% for col in source.columns %}
                                {%- if "hashDetails" in col.keys() %}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'error', hash=true, hash_algo=col.hashDetails.algorithm) }}
                                {%- else -%}
                                    {{ datavault4coalesce__ghost_record_per_datatype(col.name, col.dataType, 'error', hash=false) }}
                                {%- endif -%}
                            {% if not loop.last %},{% endif %}
                            {% endfor %}
                        {% endfor %}

                    {%- endif -%}

                {% endfor %}

            {% endif %}
        run:
          templateString: ""
    name: "Datavault by Scalefree: Stage"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::6:
    id: SCALEFREE-DATAVAULT4COALESCE::6
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: HUB'
        short: 'HUB'
        tagColor: blue
        plural: 'DATAVAULT BY SCALEFREE: HUBS'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'true'
            options: 
            - table
            default: table
         
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

          - type: multisourceToggle

        - groupName: Data Vault
          items:

          - displayName: Hub Hashkey Column
            type: columnSelector
            attributeName: is_Hub_hk
            isRequired: true

          - displayName: Hub LoadDateTimestamp Column
            enableIf: 'false'
            type: columnSelector
            attributeName: is_Hub_ldts
            isRequired: false
      templates:
        create:
          templateString: |
            {{ stage('Create Hub Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {% for source in sources %}

            	{{ stage('INSERT INTO Hub - ' ~ source.name) }}

            	{%- set hashkey_column = get_value_by_column_attribute("is_Hub_hk") -%}

            	INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            	
            WITH incoming AS (

            	SELECT DISTINCT
            	{% for col in source.columns %}
            		{{ get_source_transform(col) }} AS "{{ col.name }}"
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}

            	{{ source.join }}

            ), 

            new_records AS (

            	SELECT 
            	"SRC".* 
            	FROM incoming "SRC"
            	WHERE NOT EXISTS 

            	(SELECT 1 
            	FROM {{ ref_no_link(node.location.name, node.name) }} "TGT"
            	WHERE 
            		"SRC"."{{ hashkey_column }}" = "TGT"."{{ hashkey_column }}")

            	QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ hashkey_column }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}" ) = 1
            )


            	SELECT * FROM new_records

            {% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "Datavault by Scalefree: Hub"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::7:
    id: SCALEFREE-DATAVAULT4COALESCE::7
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: LINK'
        short: 'LINK'
        tagColor: 'Red'
        plural: 'DATAVAULT BY SCALEFREE: LINKS'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'false'
            default: table
            options:
            - table

          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false
            
          - type: multisourceToggle
          
        - groupName: Data Vault
          items:
          - displayName: Link Hashkey Column
            type: columnSelector
            attributeName: is_Link_hk
            isRequired: true 
      templates:
        create:
          templateString: |-
            {{ stage('Create Link Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
                {{ stage('Pre-SQL') }}
                {{ config.preSQL }}

            {% endif %}

            {% for source in sources %}
                        
                {{ stage('INSERT INTO Link - ' ~ source.name) }}

                {%- set link_hashkey = get_value_by_column_attribute("is_Link_hk") -%}

                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}

            WITH incoming AS 
                (
                    SELECT DISTINCT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}
                ),

            new_records AS (
                SELECT
                    "SRC".*
                FROM incoming "SRC"
                WHERE NOT EXISTS (
                    SELECT
                        1
                    FROM {{ ref_no_link(node.location.name, node.name) }} "TGT"
                    WHERE "SRC"."{{ link_hashkey }}" = "TGT"."{{ link_hashkey }}"
                )
                QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ link_hashkey }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}" ) = 1
            )

            SELECT * FROM new_records

            {% endfor %}

            {% if config.postSQL %}
                {{ stage('Post-SQL') }}
                {{ config.postSQL }}    
            {% endif %}
    name: "Datavault by Scalefree: Link"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::8:
    id: SCALEFREE-DATAVAULT4COALESCE::8
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SATELLITE V0'
        short: 'SATV0'
        plural: 'DATAVAULT BY SCALEFREE: SATELLITES V0'
        tagColor: 'Yellow'

        config:
        - groupName: Data Vault
          items:
          - displayName: Hashkey Column
            type: columnSelector
            attributeName: is_hk
            isRequired: true

          - displayName: Hashdiff Column
            type: columnSelector
            attributeName: is_hd
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false
      templates:
        create:
          templateString: |
            {{ stage('Create Satellite Table') }}

            CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            (
            	{% for col in columns %}
            		"{{ col.name }}" {{ col.dataType }}
            		{%- if not col.nullable %} NOT NULL
            			{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            		{% endif %}
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
            		{%- if not loop.last -%}, {% endif %}
            	{% endfor %}
            )
            {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
        run:
          templateString: |-
            {% if config.preSQL %}
            	{{ stage('Pre-SQL') }}
            	{{ config.preSQL }}
            {% endif %}

            {{ stage('Insert New Rows') }}
            INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            WITH latest_entries_in_sat AS (
            	/* get current rows from satellite */
            	{% for col in columns if col.is_hk or col.is_hd %}
            		{%- if loop.first -%}SELECT {% endif %} 
            		"{{col.name}}"
            		{%- if not loop.last -%}, {% endif %}
            		{%- if loop.last %} 
            			FROM {{ ref_no_link(node.location.name, node.name) }} 
            			QUALIFY ROW_NUMBER() OVER (PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}" DESC) = 1
            		{% endif %}
            	{% endfor %}
            ),

            deduplicated_numbered_source AS (
                
                {% for source in sources %}

                    SELECT
            		{% for col in source.columns %}
            			{{ get_source_transform(col) }} AS {{ col.name }},
            		{% endfor %}
                    ROW_NUMBER() OVER(PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}") as rn
                    
                    {{ source.join }}
                    QUALIFY
                    CASE
                        WHEN "{{ get_value_by_column_attribute("is_hd") }}" = LAG("{{ get_value_by_column_attribute("is_hd") }}") OVER(PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" ORDER BY "{{ datavault4coalesce.config.ldts_alias }}" ) THEN FALSE
                        ELSE TRUE
                    END

                {% endfor %}

            )

            	{% for source in sources %}
            		SELECT DISTINCT
            		{% for col in source.columns %}
            			{{ col.name }}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		FROM deduplicated_numbered_source
            	WHERE NOT EXISTS (
            		SELECT 1 FROM latest_entries_in_sat
            		WHERE 
            		{% for col in source.columns if col.is_hk or col.is_hd %}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			deduplicated_numbered_source.{{ col.name }} = latest_entries_in_sat."{{ col.name }}"
            		{% endfor %}
                    AND deduplicated_numbered_source.rn = 1
            	)

            	{% endfor %}

            {% if config.postSQL %}
            	{{ stage('Post-SQL') }}
            	{{ config.postSQL }}
            {% endif %}
    name: "Datavault by Scalefree: Satellite v0"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-SCALEFREE-DATAVAULT4COALESCE::9:
    id: SCALEFREE-DATAVAULT4COALESCE::9
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: 'DATAVAULT BY SCALEFREE: SATELLITE V1'
        short: 'SATV1'
        plural: 'DATAVAULT BY SCALEFREE: SATELLITES V1'
        tagColor: '#FFAC1C'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            enableIf: 'true'
            default: view
            options:
            - view

        - groupName: Data Vault
          items:
          - displayName: Hashkey Column
            type: columnSelector
            attributeName: is_hk
            isRequired: true

        - groupName: Pre/Post SQL
          items:
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            isRequired: false

        systemColumns:
        - displayName: "LEDTS"
          transform: |-
            COALESCE(LEAD("{{ datavault4coalesce.config.ldts_alias }}" - INTERVAL '1 MICROSECOND') 
            OVER (PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" 
            ORDER BY "{{ datavault4coalesce.config.ldts_alias }}"), {{ datavault4coalesce__string_to_timestamp(datavault4coalesce.config.timestamp_format, datavault4coalesce.config.end_of_all_times) }})
          dataType: TIMESTAMP
          placement: end
          attributeName: is_system_ledts
        - displayName: "IS_CURRENT"
          transform: |-
            CASE 
              WHEN 
                LEAD("{{ datavault4coalesce.config.ldts_alias }}" - INTERVAL '1 MICROSECOND') 
                OVER (PARTITION BY "{{ get_value_by_column_attribute("is_hk") }}" 
                ORDER BY "{{ datavault4coalesce.config.ldts_alias }}") IS NULL 
              THEN TRUE 
              ELSE FALSE 
            END
          dataType: BOOLEAN
          placement: end
          attributeName: is_system_current_col
      templates:
        create:
          templateString: |-
            {{ stage('Create Satellite View') }}

            CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            (
                {% for col in columns %}
                   "{{ col.name }}"
            		{%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
            )
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

            AS
            {% for source in sources %}
                SELECT
                {% for col in source.columns %}
                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                {{ source.join }}
            {% endfor %}
        run:
          templateString: ""
    name: "Datavault by Scalefree: Satellite v1"
    packageInfo:
      id: SCALEFREE-DATAVAULT4COALESCE
      version: https://github.com/ScalefreeCOM/datavault4coalesce.git#main
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            		{% if config.preSQL %}
            			{{ stage('Pre-SQL') }}
            			{{ config.preSQL }}
            		{% endif %}
            	
            		{{ stage('Merge Satellite') }}
            		MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            		(
            			{% for source in sources %}
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if not loop.last %}
            				{{ config.insertStrategy }}
            			{% endif %}
            		{% endfor %}
            		)
            		AS "SRC"
            		ON
            		{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                        and col.sourceColumns[0].column 
                                                        and col.sourceColumns[0].column.isChangeHash
                                                        ) -%}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            		{% endfor %}
            		WHEN NOT MATCHED THEN
            		INSERT
            		(
            			{% for col in columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		) VALUES
            		(
            			{% for col in columns %}
            				"SRC"."{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		)
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      defaultStorageLocation: VW
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: DW
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs: {}
version: 2
